# Generated by Django and manually adjusted for Discord integration

from django.db import migrations, models
import uuid
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('teams', '0001_initial'),
        ('discord_bot', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventDiscordChannel',
            fields=[
                ('id', models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, serialize=False)),
                ('category_id', models.CharField(max_length=50, help_text='Discord category ID')),
                ('text_channel_id', models.CharField(max_length=50, help_text='Main event channel')),
                ('voice_channel_id', models.CharField(max_length=50, null=True, blank=True)),
                ('practice_voice_channel_id', models.CharField(max_length=50, null=True, blank=True)),
                ('team_formation_channel_id', models.CharField(max_length=50, null=True, blank=True, help_text='Channel for team formation discussions')),
                ('announcements_channel_id', models.CharField(max_length=50, null=True, blank=True, help_text='Channel for event announcements')),
                ('signup_message_id', models.CharField(max_length=50, null=True, blank=True)),
                ('last_update_message_id', models.CharField(max_length=50, null=True, blank=True)),
                ('team_formation_message_id', models.CharField(max_length=50, null=True, blank=True)),
                ('event_info_message_id', models.CharField(max_length=50, null=True, blank=True)),
                ('channel_name', models.CharField(max_length=100, help_text='Generated channel name')),
                ('auto_archive_after_event', models.BooleanField(default=True, help_text='Automatically archive channels after event completion')),
                ('status', models.CharField(
                    max_length=20,
                    choices=[
                        ('creating', 'Creating'),
                        ('active', 'Active'),
                        ('team_formation', 'Team Formation Phase'),
                        ('event_ready', 'Event Ready'),
                        ('event_live', 'Event Live'),
                        ('completed', 'Completed'),
                        ('archived', 'Archived'),
                        ('error', 'Error'),
                    ],
                    default='creating'
                )),
                ('channels_created_at', models.DateTimeField(null=True, blank=True)),
                ('team_formation_started_at', models.DateTimeField(null=True, blank=True)),
                ('event_started_at', models.DateTimeField(null=True, blank=True)),
                ('archived_at', models.DateTimeField(null=True, blank=True)),
                ('last_error', models.TextField(blank=True)),
                ('error_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_signup_sheet', models.OneToOneField(
                    to='teams.ClubEventSignupSheet',
                    related_name='discord_channel',
                    on_delete=django.db.models.deletion.CASCADE
                )),
                ('guild', models.ForeignKey(
                    to='discord_bot.DiscordGuild',
                    related_name='event_channels',
                    on_delete=django.db.models.deletion.CASCADE
                )),
            ],
            options={
                'verbose_name': 'Event Discord Channel',
                'verbose_name_plural': 'Event Discord Channels',
            },
        ),
        migrations.CreateModel(
            name='DiscordMemberSync',
            fields=[
                ('id', models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, serialize=False)),
                ('sync_timestamp', models.DateTimeField(auto_now_add=True)),
                ('sync_type', models.CharField(
                    max_length=20,
                    choices=[
                        ('manual', 'Manual'),
                        ('automatic', 'Automatic'),
                        ('scheduled', 'Scheduled'),
                        ('webhook', 'Webhook'),
                        ('initial', 'Initial Setup'),
                    ],
                )),
                ('total_discord_members', models.IntegerField(default=0)),
                ('matched_members', models.IntegerField(default=0)),
                ('new_club_members', models.IntegerField(default=0)),
                ('updated_members', models.IntegerField(default=0)),
                ('removed_members', models.IntegerField(default=0)),
                ('errors_count', models.IntegerField(default=0)),
                ('results', models.JSONField(default=dict, help_text='Detailed sync results')),
                ('sync_duration_seconds', models.FloatField(null=True, blank=True, help_text='Time taken to complete sync')),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('sync_config', models.JSONField(default=dict, help_text='Configuration used for this sync')),
                ('triggered_by_user', models.ForeignKey(
                    to='users.User',
                    null=True,
                    blank=True,
                    help_text='User who triggered manual sync',
                    on_delete=django.db.models.deletion.SET_NULL
                )),
                ('guild', models.ForeignKey(
                    to='discord_bot.DiscordGuild',
                    related_name='member_syncs',
                    on_delete=django.db.models.deletion.CASCADE
                )),
            ],
            options={
                'verbose_name': 'Discord Member Sync',
                'verbose_name_plural': 'Discord Member Syncs',
                'ordering': ['-sync_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ClubDiscordSettings',
            fields=[
                ('id', models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, serialize=False)),
                ('auto_create_channels', models.BooleanField(default=True, help_text='Automatically create channels for new events')),
                ('channel_naming_pattern', models.CharField(
                    max_length=255,
                    default='{series_name}-{event_name}',
                    help_text='Template for channel names. Available variables: {series_name}, {event_name}, {date}, {club_name}'
                )),
                ('category_naming_pattern', models.CharField(
                    max_length=255,
                    default='{series_name} Events',
                    help_text='Template for category names'
                )),
                ('enable_voice_channels', models.BooleanField(default=True, help_text='Create voice channels for events')),
                ('enable_practice_voice', models.BooleanField(default=True, help_text='Create separate practice voice channels')),
                ('voice_channel_user_limit', models.IntegerField(default=0, help_text='User limit for voice channels (0 = unlimited)')),
                ('enable_team_formation_channels', models.BooleanField(default=True, help_text='Create channels for team formation discussions')),
                ('auto_create_team_threads', models.BooleanField(default=True, help_text='Automatically create threads for formed teams')),
                ('auto_sync_members', models.BooleanField(default=True, help_text='Automatically sync Discord members with club members')),
                ('sync_frequency_hours', models.IntegerField(default=24, help_text='Hours between automatic member syncs')),
                ('require_linked_account', models.BooleanField(default=False, help_text='Require Discord account to be linked to club membership')),
                ('enable_stint_alerts', models.BooleanField(default=True, help_text='Send alerts for stint changes during events')),
                ('signup_update_frequency', models.IntegerField(default=6, help_text='Hours between signup status updates')),
                ('enable_event_reminders', models.BooleanField(default=True, help_text='Send reminders before events start')),
                ('reminder_times_hours', models.JSONField(default=list, help_text='Hours before event to send reminders (e.g., [24, 2, 0.5])')),
                ('auto_assign_roles', models.BooleanField(default=True, help_text='Automatically assign Discord roles based on club membership')),
                ('member_role_id', models.CharField(max_length=50, blank=True, help_text='Discord role ID for club members')),
                ('admin_role_id', models.CharField(max_length=50, blank=True, help_text='Discord role ID for club admins')),
                ('teams_manager_role_id', models.CharField(max_length=50, blank=True, help_text='Discord role ID for teams managers')),
                ('notification_preferences', models.JSONField(default=dict, help_text='Advanced notification settings')),
                ('auto_archive_completed_events', models.BooleanField(default=True, help_text='Automatically archive channels after events complete')),
                ('archive_delay_hours', models.IntegerField(default=24, help_text='Hours to wait before archiving completed event channels')),
                ('delete_archived_after_days', models.IntegerField(default=30, help_text='Days to keep archived channels before deletion (0 = never delete)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.OneToOneField(
                    to='teams.Club',
                    related_name='discord_settings',
                    on_delete=django.db.models.deletion.CASCADE
                )),
            ],
            options={
                'verbose_name': 'Club Discord Settings',
                'verbose_name_plural': 'Club Discord Settings',
            },
        ),
        migrations.AddIndex(
            model_name='eventdiscordchannel',
            index=models.Index(fields=['guild', 'status'], name='discord_ev_guild_status_idx'),
        ),
        migrations.AddIndex(
            model_name='eventdiscordchannel',
            index=models.Index(fields=['text_channel_id'], name='discord_ev_text_channel_id_idx'),
        ),
        migrations.AddIndex(
            model_name='eventdiscordchannel',
            index=models.Index(fields=['category_id'], name='discord_ev_category_id_idx'),
        ),
        migrations.AddIndex(
            model_name='eventdiscordchannel',
            index=models.Index(fields=['event_signup_sheet'], name='discord_ev_event_signup_sheet_idx'),
        ),
        migrations.AddIndex(
            model_name='eventdiscordchannel',
            index=models.Index(fields=['status', 'created_at'], name='discord_ev_status_created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='eventdiscordchannel',
            index=models.Index(fields=['auto_archive_after_event', 'status'], name='discord_ev_auto_archive_status_idx'),
        ),
        migrations.AddIndex(
            model_name='discordmembersync',
            index=models.Index(fields=['guild', 'sync_timestamp'], name='discord_ms_guild_sync_timestamp_idx'),
        ),
        migrations.AddIndex(
            model_name='discordmembersync',
            index=models.Index(fields=['sync_type', 'success'], name='discord_ms_sync_type_success_idx'),
        ),
        migrations.AddIndex(
            model_name='discordmembersync',
            index=models.Index(fields=['success', 'sync_timestamp'], name='discord_ms_success_sync_timestamp_idx'),
        ),
        migrations.AddIndex(
            model_name='discordmembersync',
            index=models.Index(fields=['triggered_by_user', 'sync_timestamp'], name='discord_ms_triggered_user_idx'),
        ),
        migrations.AddIndex(
            model_name='clubdiscordsettings',
            index=models.Index(fields=['club'], name='discord_cds_club_idx'),
        ),
        migrations.AddIndex(
            model_name='clubdiscordsettings',
            index=models.Index(fields=['auto_create_channels'], name='discord_cds_auto_create_channels_idx'),
        ),
        migrations.AddIndex(
            model_name='clubdiscordsettings',
            index=models.Index(fields=['auto_sync_members'], name='discord_cds_auto_sync_members_idx'),
        ),
    ]