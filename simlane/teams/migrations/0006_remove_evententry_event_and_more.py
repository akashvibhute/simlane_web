# Generated by Django 5.1.11 on 2025-06-24 15:45

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sim', '0009_remove_simprofile_sim_simprof_user_id_c94dd1_idx_and_more'),
        ('teams', '0005_remove_eventsignupavailability_signup_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name='evententry',
            name='event',
        ),
        migrations.RemoveField(
            model_name='evententry',
            name='event_class',
        ),
        migrations.RemoveField(
            model_name='evententry',
            name='sim_car',
        ),
        migrations.RemoveField(
            model_name='evententry',
            name='team',
        ),
        migrations.RemoveField(
            model_name='evententry',
            name='user',
        ),
        migrations.RemoveField(
            model_name='predictedstint',
            name='event_entry',
        ),
        migrations.RemoveField(
            model_name='predictedstint',
            name='instance',
        ),
        migrations.RemoveField(
            model_name='predictedstint',
            name='user',
        ),
        migrations.CreateModel(
            name='RaceStrategy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='Primary Strategy', help_text='Name for this strategy variant', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this is the active strategy being used')),
                ('target_stint_length', models.IntegerField(help_text='Target stint length in minutes')),
                ('min_driver_rest', models.IntegerField(help_text='Minimum rest between stints in minutes')),
                ('pit_stop_time', models.IntegerField(default=60, help_text='Expected pit stop time in seconds')),
                ('fuel_per_stint', models.FloatField(blank=True, help_text='Expected fuel consumption per stint in liters/gallons', null=True)),
                ('fuel_tank_size', models.FloatField(blank=True, help_text='Fuel tank capacity in liters/gallons', null=True)),
                ('tire_change_frequency', models.IntegerField(default=1, help_text='Change tires every N pit stops')),
                ('tire_compound_strategy', models.JSONField(blank=True, help_text='Tire compound plan for different conditions/phases', null=True)),
                ('notes', models.TextField(blank=True)),
                ('strategy_data', models.JSONField(blank=True, help_text='Additional strategy parameters and calculations', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_strategies', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_strategies', to='sim.event')),
                ('event_instance', models.ForeignKey(help_text='Specific event instance/session this strategy is for', on_delete=django.db.models.deletion.CASCADE, related_name='race_strategies', to='sim.eventinstance')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_strategies', to='teams.team')),
            ],
            options={
                'ordering': ['-is_active', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StintPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stint_number', models.IntegerField(help_text='Sequential stint number in the race')),
                ('planned_start_lap', models.IntegerField(blank=True, help_text='Planned starting lap for this stint', null=True)),
                ('planned_end_lap', models.IntegerField(blank=True, help_text='Planned ending lap for this stint', null=True)),
                ('planned_start_time', models.DurationField(blank=True, help_text='Planned start time from race start', null=True)),
                ('planned_duration', models.DurationField(help_text='Planned stint duration')),
                ('actual_start_lap', models.IntegerField(blank=True, help_text='Actual starting lap', null=True)),
                ('actual_end_lap', models.IntegerField(blank=True, help_text='Actual ending lap', null=True)),
                ('actual_start_time', models.DateTimeField(blank=True, help_text='Actual start timestamp', null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, help_text='Actual end timestamp', null=True)),
                ('pit_instructions', models.JSONField(blank=True, help_text='Detailed pit stop instructions (fuel, tires, repairs, etc.)', null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ready', 'Ready to Execute'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped'), ('aborted', 'Aborted')], default='planned', max_length=20)),
                ('avg_lap_time', models.DurationField(blank=True, help_text='Average lap time during this stint', null=True)),
                ('fastest_lap_time', models.DurationField(blank=True, help_text='Fastest lap time during this stint', null=True)),
                ('incidents_count', models.IntegerField(default=0, help_text='Number of incidents during this stint')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stint_plans', to=settings.AUTH_USER_MODEL)),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stint_plans', to='teams.racestrategy')),
            ],
            options={
                'ordering': ['stint_number'],
            },
        ),
        migrations.DeleteModel(
            name='DriverAvailability',
        ),
        migrations.DeleteModel(
            name='EventEntry',
        ),
        migrations.DeleteModel(
            name='PredictedStint',
        ),
        migrations.AddIndex(
            model_name='racestrategy',
            index=models.Index(fields=['team', 'event'], name='teams_races_team_id_05199a_idx'),
        ),
        migrations.AddIndex(
            model_name='racestrategy',
            index=models.Index(fields=['is_active'], name='teams_races_is_acti_0ea433_idx'),
        ),
        migrations.AddIndex(
            model_name='racestrategy',
            index=models.Index(fields=['event_instance'], name='teams_races_event_i_f69e1a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='racestrategy',
            unique_together={('team', 'event', 'event_instance', 'name')},
        ),
        migrations.AddIndex(
            model_name='stintplan',
            index=models.Index(fields=['strategy', 'stint_number'], name='teams_stint_strateg_00c651_idx'),
        ),
        migrations.AddIndex(
            model_name='stintplan',
            index=models.Index(fields=['driver', 'status'], name='teams_stint_driver__6faec5_idx'),
        ),
        migrations.AddIndex(
            model_name='stintplan',
            index=models.Index(fields=['status'], name='teams_stint_status_ff03c3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stintplan',
            unique_together={('strategy', 'stint_number')},
        ),
    ]
