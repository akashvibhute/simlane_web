# Generated by Django 5.1.11 on 2025-06-28 16:04

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AvailabilityWindow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(help_text='Start time in UTC')),
                ('end_time', models.DateTimeField(help_text='End time in UTC')),
                ('can_drive', models.BooleanField(default=False)),
                ('can_spot', models.BooleanField(default=False)),
                ('can_strategize', models.BooleanField(default=False)),
                ('preference_level', models.IntegerField(choices=[(1, 'Strongly Preferred'), (2, 'Preferred'), (3, 'Available'), (4, 'If Needed'), (5, 'Emergency Only')], default=3, help_text='How much the user prefers this time slot')),
                ('max_consecutive_stints', models.IntegerField(default=1, help_text='Max consecutive stints during this window')),
                ('preferred_stint_length', models.IntegerField(blank=True, help_text='Preferred stint length in minutes for this window', null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('logo', models.ImageField(blank=True, help_text='Club logo image', null=True, upload_to='club_logos/')),
                ('website', models.URLField(blank=True)),
                ('discord_url', models.URLField(blank=True, help_text='Discord server invite link')),
                ('twitter_url', models.URLField(blank=True, help_text='Twitter/X profile URL')),
                ('youtube_url', models.URLField(blank=True, help_text='YouTube channel URL')),
                ('twitch_url', models.URLField(blank=True, help_text='Twitch channel URL')),
                ('facebook_url', models.URLField(blank=True, help_text='Facebook page URL')),
                ('instagram_url', models.URLField(blank=True, help_text='Instagram profile URL')),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False, help_text='Allow public viewing of club stats and information')),
                ('discord_guild_id', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClubEventSignupSheet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text="Club-specific title for this signup (e.g., 'Team Endurance - Le Mans')", max_length=255)),
                ('description', models.TextField(blank=True, help_text='Club-specific instructions or notes about this event')),
                ('signup_opens', models.DateTimeField(help_text='When signups open for club members')),
                ('signup_closes', models.DateTimeField(help_text='When signups close')),
                ('max_teams', models.IntegerField(blank=True, help_text='Maximum number of teams the club will enter', null=True)),
                ('target_team_size', models.IntegerField(default=4, help_text='Target number of drivers per team')),
                ('min_drivers_per_team', models.IntegerField(default=2, help_text='Minimum drivers needed to form a team')),
                ('max_drivers_per_team', models.IntegerField(default=6, help_text='Maximum drivers allowed per team')),
                ('min_license_level', models.CharField(blank=True, help_text='Minimum license level required (club-specific requirement)', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('open', 'Open for Signups'), ('closed', 'Signups Closed'), ('teams_forming', 'Teams Being Formed'), ('teams_finalized', 'Teams Finalized'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('notes_for_admins', models.TextField(blank=True, help_text='Internal notes for club admins/managers')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClubInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('teams_manager', 'Teams Manager'), ('member', 'Member')], default='member', help_text='Role the user will have in this specific club', max_length=50)),
                ('token', models.CharField(max_length=128, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('declined_at', models.DateTimeField(blank=True, null=True)),
                ('personal_message', models.TextField(blank=True, max_length=500)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('reminder_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClubMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('teams_manager', 'Teams Manager'), ('member', 'Member')], default='member', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventParticipation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('participation_type', models.CharField(choices=[('individual', 'Individual Entry'), ('team_signup', 'Team Event Signup'), ('team_entry', 'Team Event Entry')], help_text='Type of participation in this event', max_length=20)),
                ('status', models.CharField(choices=[('interested', 'Interested'), ('signed_up', 'Signed Up'), ('team_formation', 'Awaiting Team Formation'), ('team_assigned', 'Team Assigned'), ('entry_pending', 'Entry Pending'), ('entered', 'Event Entry Confirmed'), ('confirmed', 'Confirmed for Race'), ('waitlist', 'Waitlist'), ('withdrawn', 'Withdrawn'), ('participated', 'Participated')], default='interested', max_length=20)),
                ('car_number', models.CharField(blank=True, help_text='Assigned car number for race day', max_length=10)),
                ('starting_position', models.IntegerField(blank=True, help_text='Starting grid position (if applicable)', null=True)),
                ('experience_level', models.CharField(blank=True, choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('professional', 'Professional')], max_length=20)),
                ('max_stint_duration', models.IntegerField(blank=True, help_text='Maximum stint duration in minutes', null=True)),
                ('min_rest_duration', models.IntegerField(blank=True, help_text='Minimum rest between stints in minutes', null=True)),
                ('participant_timezone', models.CharField(blank=True, help_text="Participant's timezone for this event (e.g., 'America/New_York')", max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('registration_data', models.JSONField(blank=True, help_text='Additional registration information', null=True)),
                ('signed_up_at', models.DateTimeField(blank=True, null=True)),
                ('team_assigned_at', models.DateTimeField(blank=True, null=True)),
                ('entered_at', models.DateTimeField(blank=True, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('withdrawn_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventSignupInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('team_name', models.CharField(help_text='Proposed team name', max_length=255)),
                ('invitee_email', models.EmailField(max_length=254)),
                ('message', models.TextField(blank=True)),
                ('token', models.CharField(max_length=128, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('expires_at', models.DateTimeField()),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RaceStrategy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='Primary Strategy', help_text='Name for this strategy variant', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this is the active strategy being used')),
                ('target_stint_length', models.IntegerField(help_text='Target stint length in minutes')),
                ('min_driver_rest', models.IntegerField(help_text='Minimum rest between stints in minutes')),
                ('pit_stop_time', models.IntegerField(default=60, help_text='Expected pit stop time in seconds')),
                ('fuel_per_stint', models.FloatField(blank=True, help_text='Expected fuel consumption per stint in liters/gallons', null=True)),
                ('fuel_tank_size', models.FloatField(blank=True, help_text='Fuel tank capacity in liters/gallons', null=True)),
                ('tire_change_frequency', models.IntegerField(default=1, help_text='Change tires every N pit stops')),
                ('tire_compound_strategy', models.JSONField(blank=True, help_text='Tire compound plan for different conditions/phases', null=True)),
                ('notes', models.TextField(blank=True)),
                ('strategy_data', models.JSONField(blank=True, help_text='Additional strategy parameters and calculations', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-is_active', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StintPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stint_number', models.IntegerField(help_text='Sequential stint number in the race')),
                ('planned_start_lap', models.IntegerField(blank=True, help_text='Planned starting lap for this stint', null=True)),
                ('planned_end_lap', models.IntegerField(blank=True, help_text='Planned ending lap for this stint', null=True)),
                ('planned_start_time', models.DurationField(blank=True, help_text='Planned start time from race start', null=True)),
                ('planned_duration', models.DurationField(help_text='Planned stint duration')),
                ('actual_start_lap', models.IntegerField(blank=True, help_text='Actual starting lap', null=True)),
                ('actual_end_lap', models.IntegerField(blank=True, help_text='Actual ending lap', null=True)),
                ('actual_start_time', models.DateTimeField(blank=True, help_text='Actual start timestamp', null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, help_text='Actual end timestamp', null=True)),
                ('pit_instructions', models.JSONField(blank=True, help_text='Detailed pit stop instructions (fuel, tires, repairs, etc.)', null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ready', 'Ready to Execute'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped'), ('aborted', 'Aborted')], default='planned', max_length=20)),
                ('avg_lap_time', models.DurationField(blank=True, help_text='Average lap time during this stint', null=True)),
                ('fastest_lap_time', models.DurationField(blank=True, help_text='Fastest lap time during this stint', null=True)),
                ('incidents_count', models.IntegerField(default=0, help_text='Number of incidents during this stint')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['stint_number'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('sim_api_id', models.CharField(blank=True, help_text='Team ID from simulator (e.g., iRacing team ID). If present, team is imported.', max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=True, help_text='Whether this team is visible to other users')),
                ('is_temporary', models.BooleanField(default=False, help_text='Temporary teams created for specific events')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('owner', 'Team Owner'), ('manager', 'Team Manager'), ('driver', 'Driver'), ('reserve', 'Reserve Driver'), ('engineer', 'Engineer/Strategist'), ('spotter', 'Spotter'), ('guest', 'Guest Driver')], default='driver', max_length=20)),
                ('can_manage_entries', models.BooleanField(default=False, help_text='Can manage event entries for this team')),
                ('can_invite_members', models.BooleanField(default=False, help_text='Can invite new members to this team')),
                ('can_edit_team', models.BooleanField(default=False, help_text='Can edit team settings and information')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('valid_from', models.DateTimeField(blank=True, help_text='When this membership becomes valid', null=True)),
                ('valid_until', models.DateTimeField(blank=True, help_text='When this membership expires', null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
    ]
