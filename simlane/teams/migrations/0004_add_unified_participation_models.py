# Generated by Django 5.1.11 on 2025-06-23 19:01

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sim', '0007_add_unified_participation_models'),
        ('teams', '0003_clubevent_clubinvitation_eventsignup_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AvailabilityWindow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(help_text='Start time in UTC')),
                ('end_time', models.DateTimeField(help_text='End time in UTC')),
                ('can_drive', models.BooleanField(default=False)),
                ('can_spot', models.BooleanField(default=False)),
                ('can_strategize', models.BooleanField(default=False)),
                ('preference_level', models.IntegerField(choices=[(1, 'Strongly Preferred'), (2, 'Preferred'), (3, 'Available'), (4, 'If Needed'), (5, 'Emergency Only')], default=3, help_text='How much the user prefers this time slot')),
                ('max_consecutive_stints', models.IntegerField(default=1, help_text='Max consecutive stints during this window')),
                ('preferred_stint_length', models.IntegerField(blank=True, help_text='Preferred stint length in minutes for this window', null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventParticipation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('participation_type', models.CharField(choices=[('individual', 'Individual Entry'), ('team_signup', 'Team Event Signup'), ('team_entry', 'Team Event Entry')], help_text='Type of participation in this event', max_length=20)),
                ('status', models.CharField(choices=[('interested', 'Interested'), ('signed_up', 'Signed Up'), ('team_formation', 'Awaiting Team Formation'), ('team_assigned', 'Team Assigned'), ('entry_pending', 'Entry Pending'), ('entered', 'Event Entry Confirmed'), ('confirmed', 'Confirmed for Race'), ('waitlist', 'Waitlist'), ('withdrawn', 'Withdrawn'), ('participated', 'Participated')], default='interested', max_length=20)),
                ('car_number', models.CharField(blank=True, help_text='Assigned car number for race day', max_length=10)),
                ('starting_position', models.IntegerField(blank=True, help_text='Starting grid position (if applicable)', null=True)),
                ('experience_level', models.CharField(blank=True, choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('professional', 'Professional')], max_length=20)),
                ('max_stint_duration', models.IntegerField(blank=True, help_text='Maximum stint duration in minutes', null=True)),
                ('min_rest_duration', models.IntegerField(blank=True, help_text='Minimum rest between stints in minutes', null=True)),
                ('participant_timezone', models.CharField(blank=True, help_text="Participant's timezone for this event (e.g., 'America/New_York')", max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('registration_data', models.JSONField(blank=True, help_text='Additional registration information', null=True)),
                ('signed_up_at', models.DateTimeField(blank=True, null=True)),
                ('team_assigned_at', models.DateTimeField(blank=True, null=True)),
                ('entered_at', models.DateTimeField(blank=True, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('withdrawn_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventSignupInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('team_name', models.CharField(help_text='Proposed team name', max_length=255)),
                ('invitee_email', models.EmailField(max_length=254)),
                ('message', models.TextField(blank=True)),
                ('token', models.CharField(max_length=128, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('expires_at', models.DateTimeField()),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.RemoveIndex(
            model_name='team',
            name='teams_team_club_id_4b5ab3_idx',
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='team',
            name='external_team_id',
            field=models.CharField(blank=True, help_text='Team ID from simulator (e.g., iRacing team ID). If present, team is imported.', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='team',
            name='is_public',
            field=models.BooleanField(default=True, help_text='Whether this team is visible to other users'),
        ),
        migrations.AddField(
            model_name='team',
            name='is_temporary',
            field=models.BooleanField(default=False, help_text='Temporary teams created for specific events'),
        ),
        migrations.AddField(
            model_name='team',
            name='owner_sim_profile',
            field=models.ForeignKey(blank=True, help_text='SimProfile that owns this team (for imported teams)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_teams', to='sim.simprofile'),
        ),
        migrations.AddField(
            model_name='team',
            name='owner_user',
            field=models.ForeignKey(blank=True, help_text='User who created this team (for user-created teams)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owned_teams', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='team',
            name='source_simulator',
            field=models.ForeignKey(blank=True, help_text='Simulator this team was imported from', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='imported_teams', to='sim.simulator'),
        ),
        migrations.AddField(
            model_name='teammember',
            name='can_edit_team',
            field=models.BooleanField(default=False, help_text='Can edit team settings and information'),
        ),
        migrations.AddField(
            model_name='teammember',
            name='can_invite_members',
            field=models.BooleanField(default=False, help_text='Can invite new members to this team'),
        ),
        migrations.AddField(
            model_name='teammember',
            name='can_manage_entries',
            field=models.BooleanField(default=False, help_text='Can manage event entries for this team'),
        ),
        migrations.AddField(
            model_name='teammember',
            name='notes',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='teammember',
            name='role',
            field=models.CharField(choices=[('owner', 'Team Owner'), ('manager', 'Team Manager'), ('driver', 'Driver'), ('reserve', 'Reserve Driver'), ('engineer', 'Engineer/Strategist'), ('spotter', 'Spotter'), ('guest', 'Guest Driver')], default='driver', max_length=20),
        ),
        migrations.AddField(
            model_name='teammember',
            name='status',
            field=models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20),
        ),
        migrations.AddField(
            model_name='teammember',
            name='valid_from',
            field=models.DateTimeField(blank=True, help_text='When this membership becomes valid', null=True),
        ),
        migrations.AddField(
            model_name='teammember',
            name='valid_until',
            field=models.DateTimeField(blank=True, help_text='When this membership expires', null=True),
        ),
        migrations.AlterField(
            model_name='team',
            name='club',
            field=models.ForeignKey(blank=True, help_text='Club this team is associated with (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='teams.club'),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('club', 'slug'), ('owner_sim_profile', 'slug'), ('owner_user', 'slug')},
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['owner_user'], name='teams_team_owner_u_9c6757_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['owner_sim_profile'], name='teams_team_owner_s_a3ae27_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['slug'], name='teams_team_slug_1ce39f_idx'),
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['external_team_id', 'source_simulator'], name='teams_team_externa_6b6a68_idx'),
        ),
        migrations.AddIndex(
            model_name='teammember',
            index=models.Index(fields=['role'], name='teams_teamm_role_bd3941_idx'),
        ),
        migrations.AddIndex(
            model_name='teammember',
            index=models.Index(fields=['status'], name='teams_teamm_status_4af802_idx'),
        ),
        migrations.AddConstraint(
            model_name='team',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('owner_sim_profile__isnull', True), ('owner_user__isnull', False)), models.Q(('owner_sim_profile__isnull', False), ('owner_user__isnull', True)), _connector='OR'), name='team_has_single_owner_type'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='assigned_car',
            field=models.ForeignKey(blank=True, help_text='Final car assignment after team formation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_participations', to='sim.simcar'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='assigned_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_participations', to='sim.eventclass'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='backup_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backup_participations', to='sim.simcar'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='club_event',
            field=models.ForeignKey(blank=True, help_text='Club event this participation is associated with', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='participations', to='teams.clubevent'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='sim.event'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='preferred_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preferred_participations', to='sim.simcar'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='preferred_classes',
            field=models.ManyToManyField(blank=True, related_name='preferred_participations', to='sim.eventclass'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_participations', to='teams.team'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='team_allocation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='participations', to='teams.teamallocation'),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_participations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='availabilitywindow',
            name='participation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_windows', to='teams.eventparticipation'),
        ),
        migrations.AddField(
            model_name='eventsignupinvitation',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signup_invitations', to='sim.event'),
        ),
        migrations.AddField(
            model_name='eventsignupinvitation',
            name='invitee_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_signup_invitations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventsignupinvitation',
            name='organizer_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_signup_invitations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventparticipation',
            name='signup_invitation',
            field=models.ForeignKey(blank=True, help_text='Invitation that led to this signup (for individual-organized events)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='teams.eventsignupinvitation'),
        ),
        migrations.AddIndex(
            model_name='availabilitywindow',
            index=models.Index(fields=['participation'], name='teams_avail_partici_ff4801_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilitywindow',
            index=models.Index(fields=['start_time', 'end_time'], name='teams_avail_start_t_4b8159_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilitywindow',
            index=models.Index(fields=['can_drive', 'can_spot'], name='teams_avail_can_dri_e95c7e_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilitywindow',
            index=models.Index(fields=['preference_level'], name='teams_avail_prefere_982844_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilitywindow',
            index=models.Index(fields=['participation', 'start_time', 'end_time'], name='teams_avail_partici_d45915_idx'),
        ),
        migrations.AddConstraint(
            model_name='availabilitywindow',
            constraint=models.CheckConstraint(condition=models.Q(('start_time__lt', models.F('end_time'))), name='availability_window_valid_time_range'),
        ),
        migrations.AddConstraint(
            model_name='availabilitywindow',
            constraint=models.CheckConstraint(condition=models.Q(('can_drive', True), ('can_spot', True), ('can_strategize', True), _connector='OR'), name='availability_window_has_role'),
        ),
        migrations.AddIndex(
            model_name='eventsignupinvitation',
            index=models.Index(fields=['token'], name='teams_event_token_725e92_idx'),
        ),
        migrations.AddIndex(
            model_name='eventsignupinvitation',
            index=models.Index(fields=['event', 'status'], name='teams_event_event_i_001490_idx'),
        ),
        migrations.AddIndex(
            model_name='eventsignupinvitation',
            index=models.Index(fields=['expires_at'], name='teams_event_expires_615e16_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventsignupinvitation',
            unique_together={('event', 'organizer_user', 'invitee_email')},
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['event', 'status'], name='teams_event_event_i_26330a_idx'),
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['user', 'status'], name='teams_event_user_id_83f8ea_idx'),
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['team', 'status'], name='teams_event_team_id_6d1337_idx'),
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['participation_type', 'status'], name='teams_event_partici_883462_idx'),
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['club_event'], name='teams_event_club_ev_762335_idx'),
        ),
        migrations.AddIndex(
            model_name='eventparticipation',
            index=models.Index(fields=['event', 'participation_type'], name='teams_event_event_i_56d4c9_idx'),
        ),
        migrations.AddConstraint(
            model_name='eventparticipation',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('team__isnull', True), ('user__isnull', False)), models.Q(('team__isnull', False), ('user__isnull', True)), _connector='OR'), name='participation_has_single_participant_type'),
        ),
        migrations.AddConstraint(
            model_name='eventparticipation',
            constraint=models.CheckConstraint(condition=models.Q(('participation_type', 'team_entry'), ('team__isnull', True), _negated=True), name='team_entry_requires_team'),
        ),
        migrations.AlterUniqueTogether(
            name='eventparticipation',
            unique_together={('event', 'team'), ('event', 'user')},
        ),
    ]
