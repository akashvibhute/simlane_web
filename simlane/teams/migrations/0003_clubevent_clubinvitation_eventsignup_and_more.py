# Generated by Django 5.1.11 on 2025-06-21 08:53

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sim', '0006_remove_event_sim_event_type_dc849f_idx_and_more'),
        ('teams', '0002_alter_clubmember_role'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClubEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Club-specific event title', max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=280)),
                ('description', models.TextField(blank=True)),
                ('signup_deadline', models.DateTimeField()),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('requires_team_assignment', models.BooleanField(default=True)),
                ('auto_assign_teams', models.BooleanField(default=False)),
                ('team_size_min', models.IntegerField(default=2)),
                ('team_size_max', models.IntegerField(default=4)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('signup_open', 'Signup Open'), ('signup_closed', 'Signup Closed'), ('teams_assigned', 'Teams Assigned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClubInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('teams_manager', 'Teams Manager'), ('member', 'Member')], default='member', help_text='Role the user will have in this specific club', max_length=50)),
                ('token', models.CharField(max_length=128, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('declined_at', models.DateTimeField(blank=True, null=True)),
                ('personal_message', models.TextField(blank=True, max_length=500)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('reminder_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventSignup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('can_drive', models.BooleanField(default=True)),
                ('can_spectate', models.BooleanField(default=True)),
                ('experience_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('professional', 'Professional')], default='intermediate', max_length=20)),
                ('availability_notes', models.TextField(blank=True)),
                ('max_stint_duration', models.IntegerField(blank=True, help_text='Maximum stint duration in minutes', null=True)),
                ('min_rest_duration', models.IntegerField(blank=True, help_text='Minimum rest between stints in minutes', null=True)),
                ('notes', models.TextField(blank=True)),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('assignment_locked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventSignupAvailability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('available', models.BooleanField(default=True)),
                ('preferred_stint_duration', models.IntegerField(blank=True, help_text='Preferred stint duration in minutes', null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StintAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stint_number', models.IntegerField()),
                ('estimated_start_time', models.DateTimeField()),
                ('estimated_end_time', models.DateTimeField()),
                ('estimated_duration_minutes', models.IntegerField()),
                ('role', models.CharField(choices=[('primary_driver', 'Primary Driver'), ('secondary_driver', 'Secondary Driver'), ('reserve_driver', 'Reserve Driver'), ('spotter', 'Spotter'), ('strategist', 'Strategist'), ('pit_crew', 'Pit Crew')], default='primary_driver', max_length=20)),
                ('pit_entry_planned', models.BooleanField(default=False)),
                ('pit_strategy_notes', models.TextField(blank=True)),
                ('fuel_load_start', models.FloatField(blank=True, help_text='Fuel load at stint start', null=True)),
                ('fuel_load_end', models.FloatField(blank=True, help_text='Expected fuel at stint end', null=True)),
                ('tire_compound', models.CharField(blank=True, max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeamAllocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(blank=True, max_length=320)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeamAllocationMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('driver', 'Driver'), ('reserve', 'Reserve Driver'), ('spotter', 'Spotter'), ('strategist', 'Strategist')], default='driver', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeamEventStrategy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(blank=True, max_length=340)),
                ('strategy_notes', models.TextField(blank=True)),
                ('calculated_pit_windows', models.JSONField(blank=True, help_text='Calculated using PitData - optimal pit stop windows', null=True)),
                ('fuel_strategy', models.JSONField(blank=True, help_text='Fuel loads per stint calculated from PitData.refuel_flow_rate', null=True)),
                ('tire_strategy', models.JSONField(blank=True, help_text='Tire change schedule based on PitData.tire_change_all_four_sec', null=True)),
                ('weather_contingencies', models.JSONField(blank=True, help_text='Strategy adjustments based on WeatherForecast data', null=True)),
                ('is_finalized', models.BooleanField(default=False)),
                ('finalized_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together=set(),
        ),
        migrations.AddField(
            model_name='club',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_clubs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='club',
            name='is_public',
            field=models.BooleanField(default=False, help_text='Allow public viewing of club stats and information'),
        ),
        migrations.AddField(
            model_name='club',
            name='slug',
            field=models.SlugField(blank=True, max_length=255, unique=True),
        ),
        migrations.AddField(
            model_name='team',
            name='slug',
            field=models.SlugField(blank=True, max_length=255),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('club', 'name', 'slug')},
        ),
        migrations.AddIndex(
            model_name='team',
            index=models.Index(fields=['club', 'slug'], name='teams_team_club_id_4b5ab3_idx'),
        ),
        migrations.AddField(
            model_name='clubevent',
            name='base_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_events', to='sim.event'),
        ),
        migrations.AddField(
            model_name='clubevent',
            name='club',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_events', to='teams.club'),
        ),
        migrations.AddField(
            model_name='clubevent',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='clubinvitation',
            name='club',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='teams.club'),
        ),
        migrations.AddField(
            model_name='clubinvitation',
            name='invited_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventsignup',
            name='assigned_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='teams.team'),
        ),
        migrations.AddField(
            model_name='eventsignup',
            name='backup_cars',
            field=models.ManyToManyField(blank=True, related_name='backup_signups', to='sim.simcar'),
        ),
        migrations.AddField(
            model_name='eventsignup',
            name='club_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='signups', to='teams.clubevent'),
        ),
        migrations.AddField(
            model_name='eventsignup',
            name='preferred_cars',
            field=models.ManyToManyField(blank=True, related_name='preferred_signups', to='sim.simcar'),
        ),
        migrations.AddField(
            model_name='eventsignup',
            name='preferred_classes',
            field=models.ManyToManyField(blank=True, related_name='signups', to='sim.eventclass'),
        ),
        migrations.AddField(
            model_name='eventsignup',
            name='preferred_instances',
            field=models.ManyToManyField(blank=True, related_name='signups', to='sim.eventinstance'),
        ),
        migrations.AddField(
            model_name='eventsignup',
            name='primary_sim_profile',
            field=models.ForeignKey(blank=True, help_text='Primary sim profile for skill assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, to='sim.simprofile'),
        ),
        migrations.AddField(
            model_name='eventsignup',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_signups', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventsignupavailability',
            name='event_instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sim.eventinstance'),
        ),
        migrations.AddField(
            model_name='eventsignupavailability',
            name='signup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availabilities', to='teams.eventsignup'),
        ),
        migrations.AddField(
            model_name='stintassignment',
            name='driver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stint_assignments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stintassignment',
            name='predicted_stint',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='club_assignment', to='teams.predictedstint'),
        ),
        migrations.AddField(
            model_name='teamallocation',
            name='assigned_sim_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sim.simcar'),
        ),
        migrations.AddField(
            model_name='teamallocation',
            name='club_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='teams.clubevent'),
        ),
        migrations.AddField(
            model_name='teamallocation',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='teamallocation',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='teams.team'),
        ),
        migrations.AddField(
            model_name='teamallocationmember',
            name='event_signup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='teams.eventsignup'),
        ),
        migrations.AddField(
            model_name='teamallocationmember',
            name='team_allocation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='teams.teamallocation'),
        ),
        migrations.AddField(
            model_name='teameventstrategy',
            name='club_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_strategies', to='teams.clubevent'),
        ),
        migrations.AddField(
            model_name='teameventstrategy',
            name='finalized_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='finalized_strategies', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='teameventstrategy',
            name='selected_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sim.simcar'),
        ),
        migrations.AddField(
            model_name='teameventstrategy',
            name='selected_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sim.eventclass'),
        ),
        migrations.AddField(
            model_name='teameventstrategy',
            name='selected_instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sim.eventinstance'),
        ),
        migrations.AddField(
            model_name='teameventstrategy',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_strategies', to='teams.team'),
        ),
        migrations.AddField(
            model_name='teameventstrategy',
            name='team_allocation',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='strategy', to='teams.teamallocation'),
        ),
        migrations.AddField(
            model_name='stintassignment',
            name='team_strategy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stint_assignments', to='teams.teameventstrategy'),
        ),
        migrations.AddIndex(
            model_name='clubevent',
            index=models.Index(fields=['club'], name='teams_clube_club_id_0441ef_idx'),
        ),
        migrations.AddIndex(
            model_name='clubevent',
            index=models.Index(fields=['base_event'], name='teams_clube_base_ev_136b46_idx'),
        ),
        migrations.AddIndex(
            model_name='clubevent',
            index=models.Index(fields=['status'], name='teams_clube_status_865a08_idx'),
        ),
        migrations.AddIndex(
            model_name='clubevent',
            index=models.Index(fields=['signup_deadline'], name='teams_clube_signup__e5f94f_idx'),
        ),
        migrations.AddIndex(
            model_name='clubevent',
            index=models.Index(fields=['club', 'slug'], name='teams_clube_club_id_97fd4d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clubevent',
            unique_together={('club', 'base_event', 'slug')},
        ),
        migrations.AddIndex(
            model_name='clubinvitation',
            index=models.Index(fields=['token'], name='teams_clubi_token_02b257_idx'),
        ),
        migrations.AddIndex(
            model_name='clubinvitation',
            index=models.Index(fields=['expires_at'], name='teams_clubi_expires_4c26c6_idx'),
        ),
        migrations.AddIndex(
            model_name='clubinvitation',
            index=models.Index(fields=['club', 'email'], name='teams_clubi_club_id_98c7cf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='clubinvitation',
            unique_together={('club', 'email')},
        ),
        migrations.AddIndex(
            model_name='eventsignup',
            index=models.Index(fields=['club_event', 'assigned_team'], name='teams_event_club_ev_7611e2_idx'),
        ),
        migrations.AddIndex(
            model_name='eventsignup',
            index=models.Index(fields=['user', 'created_at'], name='teams_event_user_id_ae0b2d_idx'),
        ),
        migrations.AddIndex(
            model_name='eventsignup',
            index=models.Index(fields=['experience_level'], name='teams_event_experie_ae12a9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventsignup',
            unique_together={('club_event', 'user')},
        ),
        migrations.AddIndex(
            model_name='eventsignupavailability',
            index=models.Index(fields=['signup'], name='teams_event_signup__2479ca_idx'),
        ),
        migrations.AddIndex(
            model_name='eventsignupavailability',
            index=models.Index(fields=['event_instance'], name='teams_event_event_i_c3e143_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventsignupavailability',
            unique_together={('signup', 'event_instance')},
        ),
        migrations.AddIndex(
            model_name='teamallocation',
            index=models.Index(fields=['club_event'], name='teams_teama_club_ev_7e0091_idx'),
        ),
        migrations.AddIndex(
            model_name='teamallocation',
            index=models.Index(fields=['team'], name='teams_teama_team_id_712b54_idx'),
        ),
        migrations.AddIndex(
            model_name='teamallocation',
            index=models.Index(fields=['club_event', 'slug'], name='teams_teama_club_ev_ba13e3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teamallocation',
            unique_together={('club_event', 'team', 'slug')},
        ),
        migrations.AddIndex(
            model_name='teamallocationmember',
            index=models.Index(fields=['team_allocation'], name='teams_teama_team_al_b31bf5_idx'),
        ),
        migrations.AddIndex(
            model_name='teamallocationmember',
            index=models.Index(fields=['event_signup'], name='teams_teama_event_s_71806a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teamallocationmember',
            unique_together={('team_allocation', 'event_signup')},
        ),
        migrations.AddIndex(
            model_name='teameventstrategy',
            index=models.Index(fields=['team'], name='teams_teame_team_id_f96a6f_idx'),
        ),
        migrations.AddIndex(
            model_name='teameventstrategy',
            index=models.Index(fields=['club_event'], name='teams_teame_club_ev_7251c8_idx'),
        ),
        migrations.AddIndex(
            model_name='teameventstrategy',
            index=models.Index(fields=['team_allocation'], name='teams_teame_team_al_9b5142_idx'),
        ),
        migrations.AddIndex(
            model_name='teameventstrategy',
            index=models.Index(fields=['team', 'slug'], name='teams_teame_team_id_7b539c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teameventstrategy',
            unique_together={('team', 'club_event', 'slug')},
        ),
        migrations.AddIndex(
            model_name='stintassignment',
            index=models.Index(fields=['team_strategy', 'driver'], name='teams_stint_team_st_97ce78_idx'),
        ),
        migrations.AddIndex(
            model_name='stintassignment',
            index=models.Index(fields=['estimated_start_time'], name='teams_stint_estimat_6b2013_idx'),
        ),
        migrations.AddIndex(
            model_name='stintassignment',
            index=models.Index(fields=['stint_number'], name='teams_stint_stint_n_1486cd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stintassignment',
            unique_together={('team_strategy', 'stint_number')},
        ),
    ]
