# Generated by Django 5.1.11 on 2025-06-26 17:40

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sim', '0017_add_simulator_to_series'),
        ('teams', '0006_remove_evententry_event_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subsession_id', models.BigIntegerField(help_text='Simulator subsession ID', unique=True)),
                ('session_id', models.BigIntegerField(blank=True, help_text='Simulator session ID', null=True)),
                ('num_drivers', models.IntegerField(help_text='Number of participants in the event')),
                ('event_best_lap_time', models.IntegerField(blank=True, help_text='Best lap time in milliseconds', null=True)),
                ('event_average_lap', models.IntegerField(blank=True, help_text='Average lap time in milliseconds', null=True)),
                ('start_time', models.DateTimeField(help_text='Race start time')),
                ('end_time', models.DateTimeField(help_text='Race end time')),
                ('weather_data', models.JSONField(blank=True, help_text='Complete weather conditions data', null=True)),
                ('track_state', models.JSONField(blank=True, help_text='Track rubber/marble state data', null=True)),
                ('track_data', models.JSONField(blank=True, help_text='Track information data', null=True)),
                ('results_fetched_at', models.DateTimeField(auto_now_add=True, help_text='When results were fetched')),
                ('is_processed', models.BooleanField(default=False, help_text='Whether results have been processed')),
                ('raw_api_data', models.JSONField(blank=True, help_text='Complete raw API response data', null=True)),
                ('event_instance', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='sim.eventinstance')),
            ],
            options={
                'verbose_name': 'Event Result',
                'verbose_name_plural': 'Event Results',
            },
        ),
        migrations.CreateModel(
            name='TeamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_display_name', models.CharField(blank=True, help_text='Team name from API (backup)', max_length=100)),
                ('finish_position', models.IntegerField(help_text="Team's final position")),
                ('finish_position_in_class', models.IntegerField(blank=True, help_text="Team's position in class", null=True)),
                ('laps_complete', models.IntegerField(help_text='Total laps completed by team')),
                ('laps_lead', models.IntegerField(default=0, help_text='Total laps led by team')),
                ('incidents', models.IntegerField(default=0, help_text='Total incidents by team')),
                ('best_lap_time', models.IntegerField(blank=True, help_text="Team's best lap time", null=True)),
                ('best_lap_num', models.IntegerField(blank=True, help_text="Lap number of team's best lap", null=True)),
                ('average_lap', models.IntegerField(blank=True, help_text="Team's average lap time", null=True)),
                ('champ_points', models.IntegerField(default=0, help_text='Championship points earned')),
                ('reason_out', models.CharField(blank=True, help_text='Reason for DNF', max_length=50)),
                ('reason_out_id', models.IntegerField(blank=True, help_text='DNF reason code', null=True)),
                ('drop_race', models.BooleanField(default=False, help_text='Whether race is dropped')),
                ('car_id', models.IntegerField(blank=True, help_text='Car identifier', null=True)),
                ('car_class_id', models.IntegerField(blank=True, help_text='Car class identifier', null=True)),
                ('car_class_name', models.CharField(blank=True, help_text='Car class name', max_length=100)),
                ('car_name', models.CharField(blank=True, help_text='Car name', max_length=100)),
                ('country_code', models.CharField(blank=True, help_text='Team country', max_length=3)),
                ('division', models.IntegerField(blank=True, help_text='Team division', null=True)),
                ('raw_team_data', models.JSONField(blank=True, help_text='Raw team data from API', null=True)),
                ('event_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_results', to='sim.eventresult')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_results', to='teams.team')),
            ],
            options={
                'verbose_name': 'Team Result',
                'verbose_name_plural': 'Team Results',
            },
        ),
        migrations.CreateModel(
            name='ParticipantResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver_display_name', models.CharField(blank=True, help_text='Driver name from API (backup)', max_length=100)),
                ('finish_position', models.IntegerField(help_text="Driver's final position")),
                ('finish_position_in_class', models.IntegerField(blank=True, help_text="Driver's position in class", null=True)),
                ('starting_position', models.IntegerField(help_text='Starting grid position')),
                ('starting_position_in_class', models.IntegerField(blank=True, help_text='Starting position in class', null=True)),
                ('laps_complete', models.IntegerField(help_text='Laps completed by driver')),
                ('laps_lead', models.IntegerField(default=0, help_text='Laps led by driver')),
                ('incidents', models.IntegerField(default=0, help_text='Incidents by driver')),
                ('best_lap_time', models.IntegerField(blank=True, help_text="Driver's best lap time", null=True)),
                ('best_lap_num', models.IntegerField(blank=True, help_text="Lap number of driver's best lap", null=True)),
                ('average_lap', models.IntegerField(blank=True, help_text="Driver's average lap time", null=True)),
                ('champ_points', models.IntegerField(default=0, help_text='Championship points earned')),
                ('oldi_rating', models.IntegerField(blank=True, help_text='iRating before race', null=True)),
                ('newi_rating', models.IntegerField(blank=True, help_text='iRating after race', null=True)),
                ('old_license_level', models.IntegerField(blank=True, help_text='License level before race', null=True)),
                ('new_license_level', models.IntegerField(blank=True, help_text='License level after race', null=True)),
                ('old_sub_level', models.IntegerField(blank=True, help_text='Sub-level before race', null=True)),
                ('new_sub_level', models.IntegerField(blank=True, help_text='Sub-level after race', null=True)),
                ('reason_out', models.CharField(blank=True, help_text='Reason for DNF', max_length=50)),
                ('reason_out_id', models.IntegerField(blank=True, help_text='DNF reason code', null=True)),
                ('drop_race', models.BooleanField(default=False, help_text='Whether race is dropped')),
                ('car_id', models.IntegerField(blank=True, help_text='Car identifier', null=True)),
                ('car_class_id', models.IntegerField(blank=True, help_text='Car class identifier', null=True)),
                ('car_class_name', models.CharField(blank=True, help_text='Car class name', max_length=100)),
                ('car_name', models.CharField(blank=True, help_text='Car name', max_length=100)),
                ('country_code', models.CharField(blank=True, help_text='Driver country', max_length=3)),
                ('division', models.IntegerField(blank=True, help_text='Driver division', null=True)),
                ('raw_participant_data', models.JSONField(blank=True, help_text='Raw participant data from API', null=True)),
                ('event_result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='sim.eventresult')),
                ('sim_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_results', to='sim.simprofile')),
                ('team_result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='sim.teamresult')),
            ],
            options={
                'verbose_name': 'Participant Result',
                'verbose_name_plural': 'Participant Results',
            },
        ),
        migrations.AddIndex(
            model_name='eventresult',
            index=models.Index(fields=['subsession_id'], name='sim_eventre_subsess_fff5f4_idx'),
        ),
        migrations.AddIndex(
            model_name='eventresult',
            index=models.Index(fields=['event_instance'], name='sim_eventre_event_i_87282c_idx'),
        ),
        migrations.AddIndex(
            model_name='eventresult',
            index=models.Index(fields=['start_time'], name='sim_eventre_start_t_cd4b77_idx'),
        ),
        migrations.AddIndex(
            model_name='eventresult',
            index=models.Index(fields=['is_processed'], name='sim_eventre_is_proc_5a118c_idx'),
        ),
        migrations.AddIndex(
            model_name='teamresult',
            index=models.Index(fields=['event_result', 'finish_position'], name='sim_teamres_event_r_100659_idx'),
        ),
        migrations.AddIndex(
            model_name='teamresult',
            index=models.Index(fields=['team', 'finish_position'], name='sim_teamres_team_id_6b8d2d_idx'),
        ),
        migrations.AddIndex(
            model_name='teamresult',
            index=models.Index(fields=['car_class_id', 'finish_position_in_class'], name='sim_teamres_car_cla_442091_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teamresult',
            unique_together={('event_result', 'team')},
        ),
        migrations.AddIndex(
            model_name='participantresult',
            index=models.Index(fields=['event_result', 'finish_position'], name='sim_partici_event_r_fa0c6a_idx'),
        ),
        migrations.AddIndex(
            model_name='participantresult',
            index=models.Index(fields=['team_result', 'finish_position'], name='sim_partici_team_re_55b2c7_idx'),
        ),
        migrations.AddIndex(
            model_name='participantresult',
            index=models.Index(fields=['sim_profile', 'finish_position'], name='sim_partici_sim_pro_6362b8_idx'),
        ),
        migrations.AddIndex(
            model_name='participantresult',
            index=models.Index(fields=['oldi_rating', 'newi_rating'], name='sim_partici_oldi_ra_867221_idx'),
        ),
        migrations.AddIndex(
            model_name='participantresult',
            index=models.Index(fields=['car_class_id', 'finish_position_in_class'], name='sim_partici_car_cla_938500_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='participantresult',
            unique_together={('event_result', 'sim_profile'), ('team_result', 'sim_profile')},
        ),
    ]
