# Generated by Django 5.1.11 on 2025-06-23 19:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sim', '0006_remove_event_sim_event_type_dc849f_idx_and_more'),
        ('teams', '0003_clubevent_clubinvitation_eventsignup_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='event',
            name='entry_requirements',
            field=models.JSONField(blank=True, help_text='Custom requirements like specific licenses, achievements, etc.', null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='event_source',
            field=models.CharField(choices=[('OFFICIAL', 'Official Simulator Event'), ('SERIES', 'Official Series Event'), ('CLUB', 'Club-Organized Event'), ('USER', 'User-Created Event'), ('IMPORTED', 'Imported Event')], default='USER', help_text='Source/type of this event', max_length=20),
        ),
        migrations.AddField(
            model_name='event',
            name='max_entries',
            field=models.IntegerField(blank=True, help_text='Maximum number of entries allowed', null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='min_license_level',
            field=models.CharField(blank=True, help_text="Minimum license level required (e.g., 'D', 'C', 'B')", max_length=10),
        ),
        migrations.AddField(
            model_name='event',
            name='min_safety_rating',
            field=models.FloatField(blank=True, help_text='Minimum safety rating required', null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='min_skill_rating',
            field=models.FloatField(blank=True, help_text='Minimum skill rating required', null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='organizing_club',
            field=models.ForeignKey(blank=True, help_text='Club organizing this event (if club-organized)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organized_events', to='teams.club'),
        ),
        migrations.AddField(
            model_name='event',
            name='organizing_user',
            field=models.ForeignKey(blank=True, help_text='User organizing this event (if user-created)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organized_events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='visibility',
            field=models.CharField(choices=[('PUBLIC', 'Public - Anyone can view and join'), ('UNLISTED', 'Unlisted - Anyone with link can join'), ('CLUB_ONLY', 'Club Only - Only club members'), ('INVITE_ONLY', 'Invite Only - By invitation'), ('PRIVATE', 'Private - Specific users only')], default='PUBLIC', help_text='Who can see and join this event', max_length=20),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_source'], name='sim_event_event_s_2e349b_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['organizing_club'], name='sim_event_organiz_4b1466_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['organizing_user'], name='sim_event_organiz_3f6cb7_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['visibility'], name='sim_event_visibil_bfa3cd_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_source', 'visibility'], name='sim_event_event_s_c47d84_idx'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('organizing_club__isnull', False), ('organizing_user__isnull', True)), models.Q(('organizing_club__isnull', True), ('organizing_user__isnull', False)), models.Q(('organizing_club__isnull', True), ('organizing_user__isnull', True)), _connector='OR'), name='event_has_single_organizer_or_none'),
        ),
    ]
