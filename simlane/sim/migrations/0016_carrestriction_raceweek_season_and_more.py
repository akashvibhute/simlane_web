# Generated by Django 5.1.11 on 2025-06-26 14:30

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sim', '0015_alter_simcar_unique_together'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarRestriction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('max_dry_tire_sets', models.IntegerField(default=0, help_text='Maximum dry tire sets allowed')),
                ('max_pct_fuel_fill', models.IntegerField(default=100, help_text='Maximum fuel fill percentage')),
                ('power_adjust_pct', models.IntegerField(default=0, help_text='Power adjustment percentage')),
                ('weight_penalty_kg', models.IntegerField(default=0, help_text='Weight penalty in kilograms')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RaceWeek',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('week_number', models.IntegerField()),
                ('schedule_name', models.CharField(blank=True, max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateTimeField()),
                ('category', models.CharField(blank=True, max_length=20)),
                ('enable_pitlane_collisions', models.BooleanField(default=False)),
                ('full_course_cautions', models.BooleanField(default=True)),
                ('time_pattern', models.JSONField(blank=True, help_text="race_time_descriptors from API - e.g., {'first_session_time': '00:45:00', 'repeat_minutes': 120}", null=True)),
                ('weather_config', models.JSONField(blank=True, help_text='Full weather configuration from iRacing API including forecast_options, weather_summary, etc.', null=True)),
                ('weather_forecast_url', models.URLField(blank=True, help_text='iRacing weather forecast URL for this race week', max_length=500)),
                ('weather_forecast_data', models.JSONField(blank=True, help_text='Cached weather forecast data from iRacing API', null=True)),
                ('weather_forecast_version', models.IntegerField(blank=True, help_text='Weather forecast API version (1=Forecast/hourly, 3=Timeline/15min)', null=True)),
                ('track_state', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_season_id', models.IntegerField(help_text='Season ID from simulator API', unique=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=300)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('current_race_week', models.IntegerField(default=0)),
                ('max_weeks', models.IntegerField(default=12)),
                ('active', models.BooleanField(default=True)),
                ('complete', models.BooleanField(default=False)),
                ('drops', models.IntegerField(default=0, help_text='Number of dropped weeks')),
                ('race_week_to_make_divisions', models.IntegerField(default=0)),
                ('schedule_description', models.TextField(blank=True)),
                ('season_settings', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='eventinstance',
            name='external_session_id',
            field=models.BigIntegerField(blank=True, help_text='Session ID from simulator API (if different from subsession)', null=True),
        ),
        migrations.AddField(
            model_name='eventinstance',
            name='external_subsession_id',
            field=models.BigIntegerField(blank=True, help_text='Actual subsession/race ID from simulator API', null=True, unique=True),
        ),
        migrations.AddField(
            model_name='eventinstance',
            name='is_matched',
            field=models.BooleanField(default=False, help_text='True if matched to actual simulator subsession'),
        ),
        migrations.AddField(
            model_name='eventinstance',
            name='is_predicted',
            field=models.BooleanField(default=True, help_text='True if generated from time pattern, False if from actual results'),
        ),
        migrations.AddField(
            model_name='eventinstance',
            name='predicted_start_time',
            field=models.DateTimeField(blank=True, help_text='Original predicted time (before matching to actual)', null=True),
        ),
        migrations.AddField(
            model_name='series',
            name='car_switching',
            field=models.BooleanField(default=False, help_text='Car switching allowed'),
        ),
        migrations.AddField(
            model_name='series',
            name='category',
            field=models.CharField(blank=True, help_text="Track category: 'oval', 'road', etc.", max_length=50),
        ),
        migrations.AddField(
            model_name='series',
            name='cross_license',
            field=models.BooleanField(default=False, help_text='Cross-license allowed'),
        ),
        migrations.AddField(
            model_name='series',
            name='external_series_id',
            field=models.IntegerField(blank=True, help_text='Series ID from simulator API', null=True, unique=True),
        ),
        migrations.AddField(
            model_name='series',
            name='fixed_setup',
            field=models.BooleanField(default=False, help_text='Fixed setup series'),
        ),
        migrations.AddField(
            model_name='series',
            name='incident_limit',
            field=models.IntegerField(blank=True, help_text='Incident limit per race', null=True),
        ),
        migrations.AddField(
            model_name='series',
            name='is_official',
            field=models.BooleanField(default=True, help_text='Official series'),
        ),
        migrations.AddField(
            model_name='series',
            name='license_group',
            field=models.IntegerField(blank=True, help_text='Required license group', null=True),
        ),
        migrations.AddField(
            model_name='series',
            name='max_team_drivers',
            field=models.IntegerField(default=1, help_text='Maximum drivers per team'),
        ),
        migrations.AddField(
            model_name='series',
            name='multiclass',
            field=models.BooleanField(default=False, help_text='Multi-class racing'),
        ),
        migrations.AddField(
            model_name='series',
            name='region_competition',
            field=models.BooleanField(default=True, help_text='Region-based competition'),
        ),
        migrations.AddField(
            model_name='weatherforecast',
            name='units_info',
            field=models.JSONField(blank=True, default=dict, help_text='Store unit conversion factors and original units for reference', null=True),
        ),
        migrations.AlterField(
            model_name='simprofile',
            name='external_data_id',
            field=models.CharField(blank=True, help_text='Platform-specific unique ID (e.g., customer ID, driver ID)', max_length=255),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='affects_session',
            field=models.BooleanField(help_text='True if a session is running at this time'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='air_temperature',
            field=models.FloatField(help_text='Air temperature in Celsius (convert from simulator-specific units)'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='allow_precipitation',
            field=models.BooleanField(help_text='Whether precipitation is allowed during this period'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='cloud_cover',
            field=models.IntegerField(help_text='Cloud cover as percentage 0-100'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='forecast_version',
            field=models.IntegerField(help_text='Weather forecast API version from simulator'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='is_sun_up',
            field=models.BooleanField(help_text='True if sun is up at this time'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='precipitation_amount',
            field=models.FloatField(help_text='Precipitation rate in mm/hour (convert from simulator-specific units)'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='precipitation_chance',
            field=models.IntegerField(help_text='Chance of precipitation as percentage 0-100'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='pressure',
            field=models.FloatField(help_text='Atmospheric pressure in hectopascals/hPa (convert from simulator-specific units)'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='raw_data',
            field=models.JSONField(blank=True, help_text='Complete API response for future use and reference', null=True),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='relative_humidity',
            field=models.IntegerField(help_text='Relative humidity as percentage 0-100'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='time_offset',
            field=models.IntegerField(help_text='Minutes from event start'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='timestamp',
            field=models.DateTimeField(help_text='Absolute timestamp for this forecast point'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='valid_stats',
            field=models.BooleanField(help_text='Whether rain statistics are available for this period'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='wind_direction',
            field=models.IntegerField(help_text='Wind direction in degrees 0-359'),
        ),
        migrations.AlterField(
            model_name='weatherforecast',
            name='wind_speed',
            field=models.FloatField(help_text='Wind speed in meters per second (convert from simulator-specific units)'),
        ),
        migrations.AddIndex(
            model_name='eventinstance',
            index=models.Index(fields=['external_subsession_id'], name='sim_eventin_externa_fc9ec8_idx'),
        ),
        migrations.AddIndex(
            model_name='eventinstance',
            index=models.Index(fields=['external_session_id'], name='sim_eventin_externa_da1c43_idx'),
        ),
        migrations.AddIndex(
            model_name='eventinstance',
            index=models.Index(fields=['is_predicted', 'is_matched'], name='sim_eventin_is_pred_10397e_idx'),
        ),
        migrations.AddIndex(
            model_name='eventinstance',
            index=models.Index(fields=['start_time', 'event'], name='sim_eventin_start_t_dc160a_idx'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['external_series_id'], name='sim_series_externa_936a6b_idx'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['category'], name='sim_series_categor_bf71d5_idx'),
        ),
        migrations.AddIndex(
            model_name='series',
            index=models.Index(fields=['is_official'], name='sim_series_is_offi_0a6511_idx'),
        ),
        migrations.AddField(
            model_name='carrestriction',
            name='sim_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_week_restrictions', to='sim.simcar'),
        ),
        migrations.AddField(
            model_name='raceweek',
            name='sim_layout',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_weeks', to='sim.simlayout'),
        ),
        migrations.AddField(
            model_name='carrestriction',
            name='race_week',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car_restrictions', to='sim.raceweek'),
        ),
        migrations.AddField(
            model_name='season',
            name='series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='sim.series'),
        ),
        migrations.AddField(
            model_name='raceweek',
            name='season',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_weeks', to='sim.season'),
        ),
        migrations.AddIndex(
            model_name='carrestriction',
            index=models.Index(fields=['race_week'], name='sim_carrest_race_we_f42968_idx'),
        ),
        migrations.AddIndex(
            model_name='carrestriction',
            index=models.Index(fields=['sim_car'], name='sim_carrest_sim_car_5d1c2e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='carrestriction',
            unique_together={('race_week', 'sim_car')},
        ),
        migrations.AddIndex(
            model_name='season',
            index=models.Index(fields=['series'], name='sim_season_series__9489da_idx'),
        ),
        migrations.AddIndex(
            model_name='season',
            index=models.Index(fields=['external_season_id'], name='sim_season_externa_b2f808_idx'),
        ),
        migrations.AddIndex(
            model_name='season',
            index=models.Index(fields=['active'], name='sim_season_active_5c76c4_idx'),
        ),
        migrations.AddIndex(
            model_name='season',
            index=models.Index(fields=['start_date', 'end_date'], name='sim_season_start_d_6302da_idx'),
        ),
        migrations.AddIndex(
            model_name='season',
            index=models.Index(fields=['slug'], name='sim_season_slug_7f875a_idx'),
        ),
        migrations.AddIndex(
            model_name='raceweek',
            index=models.Index(fields=['season', 'week_number'], name='sim_racewee_season__922a43_idx'),
        ),
        migrations.AddIndex(
            model_name='raceweek',
            index=models.Index(fields=['start_date', 'end_date'], name='sim_racewee_start_d_54f5a1_idx'),
        ),
        migrations.AddIndex(
            model_name='raceweek',
            index=models.Index(fields=['sim_layout'], name='sim_racewee_sim_lay_c393d5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='raceweek',
            unique_together={('season', 'week_number')},
        ),
    ]
