# Generated by Django 5.1.11 on 2025-06-18 11:58

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CarClass',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon_url', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('OFFICIAL', 'Official'), ('SPECIAL', 'Special'), ('HOSTED', 'Hosted'), ('CUSTOM', 'Custom')], default='CUSTOM', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SCHEDULED', 'Scheduled'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('event_date', models.DateTimeField(blank=True, null=True)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('is_team_event', models.BooleanField(blank=True, null=True)),
                ('min_drivers_per_entry', models.IntegerField(blank=True, null=True)),
                ('max_drivers_per_entry', models.IntegerField(blank=True, null=True)),
                ('fair_share_pct', models.FloatField(blank=True, null=True)),
                ('min_pit_stops', models.IntegerField(blank=True, null=True)),
                ('required_compounds', models.JSONField(blank=True, null=True)),
                ('weather', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PitData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('drive_through_loss_sec', models.FloatField()),
                ('stop_go_base_loss_sec', models.FloatField()),
                ('stop_go_stationary_sec', models.FloatField(blank=True, null=True)),
                ('fuel_unit', models.CharField(choices=[('LITER', 'Liter'), ('GALLON', 'Gallon'), ('KG', 'Kg')], max_length=10)),
                ('refuel_flow_rate', models.FloatField()),
                ('tire_change_all_four_sec', models.FloatField()),
                ('tire_then_refuel', models.BooleanField()),
                ('simultaneous_actions', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pit Data',
                'verbose_name_plural': 'Pit Data',
            },
        ),
        migrations.CreateModel(
            name='RatingSystem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('SKILL', 'Skill'), ('SAFETY', 'Safety'), ('CONSISTENCY', 'Consistency'), ('OTHER', 'Other')], max_length=20)),
                ('min_value', models.FloatField(blank=True, null=True)),
                ('max_value', models.FloatField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('is_team_event', models.BooleanField(default=False)),
                ('min_drivers_per_entry', models.IntegerField(blank=True, null=True)),
                ('max_drivers_per_entry', models.IntegerField(blank=True, null=True)),
                ('fair_share_pct', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Series',
                'verbose_name_plural': 'Series',
            },
        ),
        migrations.CreateModel(
            name='SimTrack',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sim_api_id', models.CharField(max_length=255)),
                ('display_name', models.CharField(max_length=255)),
                ('is_laser_scanned', models.BooleanField(blank=True, null=True)),
                ('image_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('manufacturer', models.CharField(max_length=255)),
                ('release_year', models.IntegerField(blank=True, null=True)),
                ('default_image_url', models.URLField(blank=True)),
                ('base_specs', models.JSONField(blank=True, null=True)),
                ('car_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car_models', to='sim.carclass')),
            ],
        ),
        migrations.CreateModel(
            name='EventClass',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('allowed_sim_car_ids', models.JSONField(blank=True, null=True)),
                ('bop_overrides', models.JSONField(blank=True, null=True)),
                ('car_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_classes', to='sim.carclass')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='sim.event')),
            ],
        ),
        migrations.CreateModel(
            name='EventInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('registration_open', models.DateTimeField()),
                ('registration_ends', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='sim.event')),
            ],
        ),
        migrations.CreateModel(
            name='EventSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_type', models.CharField(choices=[('WARMUP', 'Warmup'), ('PRACTICE', 'Practice'), ('QUALIFYING', 'Qualifying'), ('RACE', 'Race')], max_length=20)),
                ('duration', models.IntegerField()),
                ('in_game_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='sim.event')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='series',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='sim.series'),
        ),
        migrations.CreateModel(
            name='SimLayout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('layout_code', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('ROAD', 'Road'), ('OVAL', 'Oval'), ('STREET', 'Street'), ('RALLY', 'Rally'), ('DRAG', 'Drag'), ('OTHER', 'Other')], max_length=20)),
                ('length_km', models.FloatField()),
                ('image_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pit_data', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sim_layout', to='sim.pitdata')),
                ('sim_track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='layouts', to='sim.simtrack')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='sim_layout',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='sim.simlayout'),
        ),
        migrations.CreateModel(
            name='SimProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('profile_name', models.CharField(max_length=255)),
                ('external_data_id', models.CharField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('preferences', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sim_profiles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProfileRating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('discipline', models.CharField(blank=True, choices=[('ROAD', 'Road'), ('SPORTS_CAR', 'Sports Car'), ('FORMULA', 'Formula'), ('OVAL', 'Oval'), ('DIRT_ROAD', 'Dirt Road'), ('DIRT_OVAL', 'Dirt Oval'), ('OTHER', 'Other')], max_length=20)),
                ('value', models.FloatField()),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('rating_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_ratings', to='sim.ratingsystem')),
                ('sim_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='sim.simprofile')),
            ],
        ),
        migrations.CreateModel(
            name='LapTime',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lap_time_ms', models.IntegerField()),
                ('rating_at_time', models.FloatField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('fuel_level', models.FloatField(blank=True, null=True)),
                ('tire_wear', models.JSONField(blank=True, null=True)),
                ('setup', models.JSONField(blank=True, null=True)),
                ('video_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('conditions', models.JSONField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sim_layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lap_times', to='sim.simlayout')),
                ('sim_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lap_times', to='sim.simprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Simulator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('version', models.CharField(max_length=50)),
                ('logo_url', models.URLField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('name', 'version')},
            },
        ),
        migrations.AddField(
            model_name='simtrack',
            name='simulator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sim_tracks', to='sim.simulator'),
        ),
        migrations.AddField(
            model_name='simprofile',
            name='simulator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sim_profiles', to='sim.simulator'),
        ),
        migrations.CreateModel(
            name='SimCar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sim_api_id', models.CharField(max_length=255)),
                ('bop_version', models.CharField(blank=True, max_length=50)),
                ('image_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('car_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sim_cars', to='sim.carmodel')),
                ('pit_data', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sim_car', to='sim.pitdata')),
                ('simulator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sim_cars', to='sim.simulator')),
            ],
        ),
        migrations.AddField(
            model_name='ratingsystem',
            name='simulator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_systems', to='sim.simulator'),
        ),
        migrations.AddField(
            model_name='event',
            name='simulator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='sim.simulator'),
        ),
        migrations.CreateModel(
            name='TrackModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('default_image_url', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'unique_together': {('name', 'country')},
            },
        ),
        migrations.AddField(
            model_name='simtrack',
            name='track_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sim_tracks', to='sim.trackmodel'),
        ),
        migrations.CreateModel(
            name='WeatherForecast',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('time_offset', models.IntegerField()),
                ('timestamp', models.DateTimeField()),
                ('is_sun_up', models.BooleanField()),
                ('affects_session', models.BooleanField()),
                ('air_temperature', models.FloatField()),
                ('pressure', models.FloatField()),
                ('wind_speed', models.FloatField()),
                ('wind_direction', models.IntegerField()),
                ('precipitation_chance', models.IntegerField()),
                ('precipitation_amount', models.FloatField()),
                ('allow_precipitation', models.BooleanField()),
                ('cloud_cover', models.IntegerField()),
                ('relative_humidity', models.IntegerField()),
                ('forecast_version', models.IntegerField()),
                ('valid_stats', models.BooleanField()),
                ('raw_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_forecasts', to='sim.eventinstance')),
            ],
        ),
        migrations.AddIndex(
            model_name='carmodel',
            index=models.Index(fields=['car_class'], name='sim_carmode_car_cla_dd31ae_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='carmodel',
            unique_together={('manufacturer', 'name')},
        ),
        migrations.AddIndex(
            model_name='eventclass',
            index=models.Index(fields=['event'], name='sim_eventcl_event_i_0e888a_idx'),
        ),
        migrations.AddIndex(
            model_name='eventclass',
            index=models.Index(fields=['car_class'], name='sim_eventcl_car_cla_f2bcb5_idx'),
        ),
        migrations.AddIndex(
            model_name='eventinstance',
            index=models.Index(fields=['event'], name='sim_eventin_event_i_43845b_idx'),
        ),
        migrations.AddIndex(
            model_name='eventinstance',
            index=models.Index(fields=['start_time'], name='sim_eventin_start_t_01c74b_idx'),
        ),
        migrations.AddIndex(
            model_name='eventinstance',
            index=models.Index(fields=['registration_open'], name='sim_eventin_registr_300f0c_idx'),
        ),
        migrations.AddIndex(
            model_name='eventinstance',
            index=models.Index(fields=['registration_ends'], name='sim_eventin_registr_e0261f_idx'),
        ),
        migrations.AddIndex(
            model_name='eventsession',
            index=models.Index(fields=['event'], name='sim_eventse_event_i_a9b1c3_idx'),
        ),
        migrations.AddIndex(
            model_name='eventsession',
            index=models.Index(fields=['session_type'], name='sim_eventse_session_0e9a67_idx'),
        ),
        migrations.AddIndex(
            model_name='profilerating',
            index=models.Index(fields=['sim_profile', 'rating_system', 'discipline', 'recorded_at'], name='sim_profile_sim_pro_098557_idx'),
        ),
        migrations.AddIndex(
            model_name='laptime',
            index=models.Index(fields=['sim_profile'], name='sim_laptime_sim_pro_6e2f40_idx'),
        ),
        migrations.AddIndex(
            model_name='laptime',
            index=models.Index(fields=['sim_layout'], name='sim_laptime_sim_lay_e90898_idx'),
        ),
        migrations.AddIndex(
            model_name='laptime',
            index=models.Index(fields=['recorded_at'], name='sim_laptime_recorde_e32a98_idx'),
        ),
        migrations.AddIndex(
            model_name='simlayout',
            index=models.Index(fields=['sim_track'], name='sim_simlayo_sim_tra_7a0dd1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='simlayout',
            unique_together={('sim_track', 'layout_code')},
        ),
        migrations.AddIndex(
            model_name='simprofile',
            index=models.Index(fields=['user'], name='sim_simprof_user_id_c94dd1_idx'),
        ),
        migrations.AddIndex(
            model_name='simprofile',
            index=models.Index(fields=['simulator'], name='sim_simprof_simulat_af3750_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='simprofile',
            unique_together={('user', 'simulator', 'profile_name')},
        ),
        migrations.AddIndex(
            model_name='simcar',
            index=models.Index(fields=['car_model'], name='sim_simcar_car_mod_994d87_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='simcar',
            unique_together={('simulator', 'car_model'), ('simulator', 'sim_api_id')},
        ),
        migrations.AlterUniqueTogether(
            name='ratingsystem',
            unique_together={('simulator', 'code')},
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['simulator'], name='sim_event_simulat_82ed9a_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['series'], name='sim_event_series__e9b407_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='sim_event_status_cb577d_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['type'], name='sim_event_type_dc849f_idx'),
        ),
        migrations.AddIndex(
            model_name='simtrack',
            index=models.Index(fields=['track_model'], name='sim_simtrac_track_m_e85dad_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='simtrack',
            unique_together={('simulator', 'sim_api_id'), ('simulator', 'track_model')},
        ),
        migrations.AddIndex(
            model_name='weatherforecast',
            index=models.Index(fields=['event_instance'], name='sim_weather_event_i_7cdee0_idx'),
        ),
        migrations.AddIndex(
            model_name='weatherforecast',
            index=models.Index(fields=['time_offset'], name='sim_weather_time_of_2965e8_idx'),
        ),
        migrations.AddIndex(
            model_name='weatherforecast',
            index=models.Index(fields=['timestamp'], name='sim_weather_timesta_b106c5_idx'),
        ),
    ]
