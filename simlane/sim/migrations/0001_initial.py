# Generated by Django 5.1.11 on 2025-06-28 16:04

import django.contrib.postgres.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CarClass',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=120)),
                ('short_name', models.CharField(blank=True, help_text="Short display name (e.g., 'GT3 Class')", max_length=50)),
                ('category', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon_url', models.URLField(blank=True)),
                ('sim_api_id', models.CharField(blank=True, help_text='Car class ID from simulator API (e.g., car_class_id from iRacing)', max_length=50, null=True)),
                ('relative_speed', models.IntegerField(blank=True, help_text='Relative speed rating from simulator API', null=True)),
                ('rain_enabled', models.BooleanField(default=False, help_text='Whether rain is supported for this car class')),
                ('car_sim_api_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Array of car sim_api_ids in this class (from cars_in_class API field)', size=None)),
            ],
        ),
        migrations.CreateModel(
            name='CarRestriction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('max_dry_tire_sets', models.IntegerField(default=0, help_text='Maximum dry tire sets allowed')),
                ('max_pct_fuel_fill', models.IntegerField(default=100, help_text='Maximum fuel fill percentage')),
                ('power_adjust_pct', models.FloatField(default=0.0, help_text='Power adjustment percentage (can be decimal)')),
                ('weight_penalty_kg', models.IntegerField(default=0, help_text='Weight penalty in kilograms')),
                ('is_fixed_setup', models.BooleanField(default=False, help_text='Whether this car uses fixed setup')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=280)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('OFFICIAL', 'Official'), ('SPECIAL', 'Special'), ('HOSTED', 'Hosted'), ('CUSTOM', 'Custom')], default='CUSTOM', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SCHEDULED', 'Scheduled'), ('ONGOING', 'Ongoing'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('event_source', models.CharField(choices=[('SPECIAL', 'Special Event - Official'), ('SERIES', 'Series Event - Official'), ('CLUB', 'Club-Organized Event'), ('USER', 'User-Created Event')], default='USER', help_text='Source/type of this event', max_length=20)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public - Anyone can view and join'), ('UNLISTED', 'Unlisted - Anyone with link can join'), ('CLUB_ONLY', 'Club Only - Only club members'), ('INVITE_ONLY', 'Invite Only - By invitation'), ('PRIVATE', 'Private - Specific users only')], default='PUBLIC', help_text='Who can see and join this event', max_length=20)),
                ('min_license_level', models.CharField(blank=True, help_text="Minimum license level required (e.g., 'D', 'C', 'B')", max_length=10)),
                ('min_safety_rating', models.FloatField(blank=True, help_text='Minimum safety rating required', null=True)),
                ('min_skill_rating', models.FloatField(blank=True, help_text='Minimum skill rating required', null=True)),
                ('max_entries', models.IntegerField(blank=True, help_text='Maximum number of entries allowed', null=True)),
                ('entry_requirements', models.JSONField(blank=True, help_text='Custom requirements like specific licenses, achievements, etc.', null=True)),
                ('allowed_car_class_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Array of car class sim_api_ids allowed in this event (overrides series if set)', size=None)),
                ('round_number', models.IntegerField(blank=True, help_text='Round/week number in series (replaces week_number from RaceWeek)', null=True)),
                ('schedule_name', models.CharField(blank=True, max_length=255)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('category', models.CharField(blank=True, help_text="Track category: 'oval', 'road'", max_length=20)),
                ('enable_pitlane_collisions', models.BooleanField(default=False)),
                ('full_course_cautions', models.BooleanField(default=True)),
                ('time_pattern', models.JSONField(blank=True, help_text="race_time_descriptors from API - e.g., {'first_session_time': '00:45:00', 'repeat_minutes': 120}", null=True)),
                ('weather_config', models.JSONField(blank=True, help_text='Full weather configuration from iRacing API including forecast_options, weather_summary, etc.', null=True)),
                ('weather_forecast_url', models.URLField(blank=True, help_text='iRacing weather forecast URL for this event', max_length=500)),
                ('weather_forecast_data', models.JSONField(blank=True, help_text='Cached weather forecast data from iRacing API', null=True)),
                ('weather_forecast_version', models.IntegerField(blank=True, help_text='Weather forecast API version (1=Forecast/hourly, 3=Timeline/15min)', null=True)),
                ('min_air_temp', models.FloatField(blank=True, help_text='Minimum forecasted air temp (Celsius)', null=True)),
                ('max_air_temp', models.FloatField(blank=True, help_text='Maximum forecasted air temp (Celsius)', null=True)),
                ('max_precip_chance', models.IntegerField(blank=True, help_text='Maximum precipitation chance percentage (0-100)', null=True)),
                ('track_state', models.JSONField(blank=True, help_text='leave_marbles, etc.', null=True)),
                ('event_date', models.DateTimeField(blank=True, null=True)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('is_team_event', models.BooleanField(blank=True, null=True)),
                ('min_drivers_per_entry', models.IntegerField(blank=True, null=True)),
                ('max_drivers_per_entry', models.IntegerField(blank=True, null=True)),
                ('fair_share_pct', models.FloatField(blank=True, null=True)),
                ('min_pit_stops', models.IntegerField(blank=True, null=True)),
                ('required_compounds', models.JSONField(blank=True, null=True)),
                ('weather', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventClass',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=280)),
                ('bop_overrides', models.JSONField(blank=True, null=True)),
                ('class_order', models.IntegerField(default=0, help_text='Order for multi-class display (0=fastest class)')),
                ('min_entries', models.IntegerField(blank=True, help_text='Minimum entries needed for this class', null=True)),
                ('max_entries', models.IntegerField(blank=True, help_text='Maximum entries allowed for this class', null=True)),
                ('entry_fee', models.DecimalField(blank=True, decimal_places=2, help_text='Entry fee for this class', max_digits=10, null=True)),
                ('inherit_series_restrictions', models.BooleanField(default=True, help_text='Whether to inherit BOP restrictions from series/race week')),
            ],
        ),
        migrations.CreateModel(
            name='EventResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subsession_id', models.BigIntegerField(help_text='Simulator subsession ID', unique=True)),
                ('session_id', models.BigIntegerField(blank=True, help_text='Simulator session ID', null=True)),
                ('num_drivers', models.IntegerField(help_text='Number of participants in the event')),
                ('event_best_lap_time', models.IntegerField(blank=True, help_text='Best lap time in milliseconds', null=True)),
                ('event_average_lap', models.IntegerField(blank=True, help_text='Average lap time in milliseconds', null=True)),
                ('start_time', models.DateTimeField(help_text='Race start time')),
                ('end_time', models.DateTimeField(help_text='Race end time')),
                ('weather_data', models.JSONField(blank=True, help_text='Complete weather conditions data', null=True)),
                ('track_state', models.JSONField(blank=True, help_text='Track rubber/marble state data', null=True)),
                ('track_data', models.JSONField(blank=True, help_text='Track information data', null=True)),
                ('results_fetched_at', models.DateTimeField(auto_now_add=True, help_text='When results were fetched')),
                ('is_processed', models.BooleanField(default=False, help_text='Whether results have been processed')),
                ('raw_api_data', models.JSONField(blank=True, help_text='Complete raw API response data', null=True)),
            ],
            options={
                'verbose_name': 'Event Result',
                'verbose_name_plural': 'Event Results',
            },
        ),
        migrations.CreateModel(
            name='EventSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_type', models.CharField(choices=[('WARMUP', 'Warmup'), ('PRACTICE', 'Practice'), ('QUALIFYING', 'Qualifying'), ('RACE', 'Race')], max_length=20)),
                ('duration', models.IntegerField()),
                ('in_game_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LapTime',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('lap_time_ms', models.IntegerField()),
                ('rating_at_time', models.FloatField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('fuel_level', models.FloatField(blank=True, null=True)),
                ('tire_wear', models.JSONField(blank=True, null=True)),
                ('setup', models.JSONField(blank=True, null=True)),
                ('video_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('conditions', models.JSONField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ParticipantResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver_display_name', models.CharField(blank=True, help_text='Driver name from API (backup)', max_length=100)),
                ('finish_position', models.IntegerField(help_text="Driver's final position")),
                ('finish_position_in_class', models.IntegerField(blank=True, help_text="Driver's position in class", null=True)),
                ('starting_position', models.IntegerField(help_text='Starting grid position')),
                ('starting_position_in_class', models.IntegerField(blank=True, help_text='Starting position in class', null=True)),
                ('laps_complete', models.IntegerField(help_text='Laps completed by driver')),
                ('laps_lead', models.IntegerField(default=0, help_text='Laps led by driver')),
                ('incidents', models.IntegerField(default=0, help_text='Incidents by driver')),
                ('best_lap_time', models.IntegerField(blank=True, help_text="Driver's best lap time", null=True)),
                ('best_lap_num', models.IntegerField(blank=True, help_text="Lap number of driver's best lap", null=True)),
                ('average_lap', models.IntegerField(blank=True, help_text="Driver's average lap time", null=True)),
                ('champ_points', models.IntegerField(default=0, help_text='Championship points earned')),
                ('oldi_rating', models.IntegerField(blank=True, help_text='iRating before race', null=True)),
                ('newi_rating', models.IntegerField(blank=True, help_text='iRating after race', null=True)),
                ('old_license_level', models.IntegerField(blank=True, help_text='License level before race', null=True)),
                ('new_license_level', models.IntegerField(blank=True, help_text='License level after race', null=True)),
                ('old_sub_level', models.IntegerField(blank=True, help_text='Sub-level before race', null=True)),
                ('new_sub_level', models.IntegerField(blank=True, help_text='Sub-level after race', null=True)),
                ('reason_out', models.CharField(blank=True, help_text='Reason for DNF', max_length=50)),
                ('reason_out_id', models.IntegerField(blank=True, help_text='DNF reason code', null=True)),
                ('drop_race', models.BooleanField(default=False, help_text='Whether race is dropped')),
                ('car_id', models.IntegerField(blank=True, help_text='Car identifier', null=True)),
                ('car_class_id', models.IntegerField(blank=True, help_text='Car class identifier', null=True)),
                ('car_class_name', models.CharField(blank=True, help_text='Car class name', max_length=100)),
                ('car_name', models.CharField(blank=True, help_text='Car name', max_length=100)),
                ('country_code', models.CharField(blank=True, help_text='Driver country', max_length=3)),
                ('division', models.IntegerField(blank=True, help_text='Driver division', null=True)),
                ('raw_participant_data', models.JSONField(blank=True, help_text='Raw participant data from API', null=True)),
            ],
            options={
                'verbose_name': 'Participant Result',
                'verbose_name_plural': 'Participant Results',
            },
        ),
        migrations.CreateModel(
            name='PitData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('drive_through_loss_sec', models.FloatField()),
                ('stop_go_base_loss_sec', models.FloatField()),
                ('stop_go_stationary_sec', models.FloatField(blank=True, null=True)),
                ('fuel_unit', models.CharField(choices=[('LITER', 'Liter'), ('GALLON', 'Gallon'), ('KG', 'Kg')], max_length=10)),
                ('refuel_flow_rate', models.FloatField()),
                ('tire_change_all_four_sec', models.FloatField()),
                ('tire_then_refuel', models.BooleanField()),
                ('simultaneous_actions', models.BooleanField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pit Data',
                'verbose_name_plural': 'Pit Data',
            },
        ),
        migrations.CreateModel(
            name='ProfileRating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('discipline', models.CharField(blank=True, choices=[('ROAD', 'Road'), ('SPORTS_CAR', 'Sports Car'), ('FORMULA', 'Formula'), ('OVAL', 'Oval'), ('DIRT_ROAD', 'Dirt Road'), ('DIRT_OVAL', 'Dirt Oval'), ('OTHER', 'Other')], max_length=20)),
                ('value', models.FloatField()),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RatingSystem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('SKILL', 'Skill'), ('SAFETY', 'Safety'), ('CONSISTENCY', 'Consistency'), ('OTHER', 'Other')], max_length=20)),
                ('min_value', models.FloatField(blank=True, null=True)),
                ('max_value', models.FloatField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_season_id', models.IntegerField(help_text='Season ID from simulator API', unique=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=300)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('current_race_week', models.IntegerField(default=0)),
                ('max_weeks', models.IntegerField(default=12)),
                ('active', models.BooleanField(default=True)),
                ('complete', models.BooleanField(default=False)),
                ('schedule_description', models.TextField(blank=True)),
                ('season_settings', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=280)),
                ('description', models.TextField(blank=True)),
                ('logo_url', models.URLField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('external_series_id', models.IntegerField(blank=True, help_text='Series ID from simulator API', null=True, unique=True)),
                ('category', models.CharField(blank=True, help_text="Track category: 'oval', 'road', etc.", max_length=50)),
                ('license_group', models.IntegerField(blank=True, help_text='Required license group', null=True)),
                ('is_official', models.BooleanField(default=True, help_text='Official series')),
                ('multiclass', models.BooleanField(default=False, help_text='Multi-class racing')),
                ('cross_license', models.BooleanField(default=False, help_text='Cross-license allowed')),
                ('car_switching', models.BooleanField(default=False, help_text='Car switching allowed')),
                ('fixed_setup', models.BooleanField(default=False, help_text='Fixed setup series')),
                ('incident_limit', models.IntegerField(blank=True, help_text='Incident limit per race', null=True)),
                ('max_team_drivers', models.IntegerField(default=1, help_text='Maximum drivers per team')),
                ('region_competition', models.BooleanField(default=True, help_text='Region-based competition')),
                ('allowed_car_class_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Array of car class sim_api_ids allowed in this series (from car_class_ids API field)', size=None)),
                ('is_team_event', models.BooleanField(default=False)),
                ('min_drivers_per_entry', models.IntegerField(blank=True, null=True)),
                ('max_drivers_per_entry', models.IntegerField(blank=True, null=True)),
                ('fair_share_pct', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Series',
                'verbose_name_plural': 'Series',
            },
        ),
        migrations.CreateModel(
            name='SimCar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sim_api_id', models.CharField(help_text='car_id from iRacing API for API calls', max_length=255)),
                ('package_id', models.IntegerField(help_text='package_id from iRacing API for ownership tracking')),
                ('display_name', models.CharField(blank=True, help_text='Full display name from car_name field', max_length=255)),
                ('bop_version', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('max_power_adjust_pct', models.IntegerField(default=0, help_text='Maximum power adjustment percentage')),
                ('min_power_adjust_pct', models.IntegerField(default=0, help_text='Minimum power adjustment percentage')),
                ('max_weight_penalty_kg', models.IntegerField(default=0, help_text='Maximum weight penalty in kg')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Price in USD', max_digits=10, null=True)),
                ('price_display', models.CharField(blank=True, help_text='Formatted price string', max_length=50)),
                ('free_with_subscription', models.BooleanField(default=False, help_text='Free with base subscription')),
                ('is_purchasable', models.BooleanField(default=True, help_text='Can be purchased (is_ps_purchasable)')),
                ('logo', models.ImageField(blank=True, help_text='Car/manufacturer logo', null=True, upload_to='cars/logos/')),
                ('small_image', models.ImageField(blank=True, help_text='Thumbnail image', null=True, upload_to='cars/thumbnails/')),
                ('large_image', models.ImageField(blank=True, help_text='Main/hero image', null=True, upload_to='cars/images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SimLayout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('layout_code', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=280)),
                ('type', models.CharField(choices=[('ROAD', 'Road'), ('OVAL', 'Oval'), ('STREET', 'Street'), ('RALLY', 'Rally'), ('DRAG', 'Drag'), ('DIRT_ROAD', 'Dirt Road'), ('DIRT_OVAL', 'Dirt Oval'), ('OTHER', 'Other')], max_length=20)),
                ('length_km', models.FloatField(help_text='Track configuration length in kilometers')),
                ('image_url', models.URLField(blank=True)),
                ('layout_type', models.CharField(choices=[('ROAD', 'Road'), ('OVAL', 'Oval'), ('STREET', 'Street'), ('RALLY', 'Rally'), ('DRAG', 'Drag'), ('DIRT_ROAD', 'Dirt Road'), ('DIRT_OVAL', 'Dirt Oval'), ('OTHER', 'Other')], default='ROAD', help_text='Specific layout type (road, oval, dirt_road, dirt_oval, etc.)', max_length=20)),
                ('retired', models.BooleanField(default=False, help_text='Layout is retired/deprecated')),
                ('max_cars', models.IntegerField(blank=True, help_text='Maximum cars supported on this layout', null=True)),
                ('grid_stalls', models.IntegerField(blank=True, help_text='Number of grid starting positions', null=True)),
                ('number_pitstalls', models.IntegerField(blank=True, help_text='Number of pit stalls available', null=True)),
                ('corners_per_lap', models.IntegerField(blank=True, help_text='Number of corners per lap', null=True)),
                ('qualify_laps', models.IntegerField(blank=True, help_text='Number of qualifying laps', null=True)),
                ('allow_rolling_start', models.BooleanField(default=True, help_text='Whether rolling starts are allowed')),
                ('pit_road_speed_limit', models.IntegerField(blank=True, help_text='Pit road speed limit (mph/kph)', null=True)),
                ('night_lighting', models.BooleanField(default=False, help_text='Track has night lighting capabilities')),
                ('fully_lit', models.BooleanField(default=False, help_text='Track is fully lit for night racing')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SimProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sim_api_id', models.CharField(blank=True, help_text='Platform-specific unique ID (e.g., customer ID, driver ID)', max_length=255)),
                ('profile_name', models.CharField(help_text='Display name on the platform', max_length=255)),
                ('is_verified', models.BooleanField(default=False, help_text='True if the linked user has verified ownership of this profile')),
                ('is_public', models.BooleanField(default=True, help_text='Whether this profile appears in public searches and listings')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('linked_at', models.DateTimeField(blank=True, help_text='When this profile was linked to the current user', null=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('preferences', models.JSONField(blank=True, help_text='User-controlled preferences and settings', null=True)),
                ('profile_data', models.JSONField(default=dict, help_text='Platform-specific profile data (stats, achievements, etc.)')),
            ],
        ),
        migrations.CreateModel(
            name='SimProfileCarOwnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired_at', models.DateTimeField(auto_now_add=True)),
                ('is_favorite', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Car Ownership',
                'verbose_name_plural': 'Car Ownerships',
            },
        ),
        migrations.CreateModel(
            name='SimProfileTrackOwnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acquired_at', models.DateTimeField(auto_now_add=True)),
                ('is_favorite', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Track Ownership',
                'verbose_name_plural': 'Track Ownerships',
            },
        ),
        migrations.CreateModel(
            name='SimTrack',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(blank=True, max_length=300)),
                ('sim_api_id', models.CharField(max_length=255)),
                ('display_name', models.CharField(max_length=255)),
                ('is_laser_scanned', models.BooleanField(blank=True, null=True)),
                ('package_id', models.CharField(blank=True, help_text='Package ID from API for ownership tracking', max_length=50)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Track price in USD', max_digits=8, null=True)),
                ('is_free', models.BooleanField(default=False, help_text='Free with subscription')),
                ('is_purchasable', models.BooleanField(default=True, help_text='Can be purchased')),
                ('rain_enabled', models.BooleanField(default=False, help_text='Rain weather supported')),
                ('search_filters', models.CharField(blank=True, help_text='Search filters from API for optimization', max_length=500)),
                ('logo', models.ImageField(blank=True, help_text='Track logo', null=True, upload_to='tracks/logos/')),
                ('small_image', models.ImageField(blank=True, help_text='Thumbnail image', null=True, upload_to='tracks/thumbnails/')),
                ('large_image', models.ImageField(blank=True, help_text='Main/hero image', null=True, upload_to='tracks/images/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Simulator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=280, unique=True)),
                ('logo_url', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='simulators/logos/')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='simulators/icons/')),
                ('website', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_display_name', models.CharField(blank=True, help_text='Team name from API (backup)', max_length=100)),
                ('finish_position', models.IntegerField(help_text="Team's final position")),
                ('finish_position_in_class', models.IntegerField(blank=True, help_text="Team's position in class", null=True)),
                ('laps_complete', models.IntegerField(help_text='Total laps completed by team')),
                ('laps_lead', models.IntegerField(default=0, help_text='Total laps led by team')),
                ('incidents', models.IntegerField(default=0, help_text='Total incidents by team')),
                ('best_lap_time', models.IntegerField(blank=True, help_text="Team's best lap time", null=True)),
                ('best_lap_num', models.IntegerField(blank=True, help_text="Lap number of team's best lap", null=True)),
                ('average_lap', models.IntegerField(blank=True, help_text="Team's average lap time", null=True)),
                ('champ_points', models.IntegerField(default=0, help_text='Championship points earned')),
                ('reason_out', models.CharField(blank=True, help_text='Reason for DNF', max_length=50)),
                ('reason_out_id', models.IntegerField(blank=True, help_text='DNF reason code', null=True)),
                ('drop_race', models.BooleanField(default=False, help_text='Whether race is dropped')),
                ('car_id', models.IntegerField(blank=True, help_text='Car identifier', null=True)),
                ('car_class_id', models.IntegerField(blank=True, help_text='Car class identifier', null=True)),
                ('car_class_name', models.CharField(blank=True, help_text='Car class name', max_length=100)),
                ('car_name', models.CharField(blank=True, help_text='Car name', max_length=100)),
                ('country_code', models.CharField(blank=True, help_text='Team country', max_length=3)),
                ('division', models.IntegerField(blank=True, help_text='Team division', null=True)),
                ('raw_team_data', models.JSONField(blank=True, help_text='Raw team data from API', null=True)),
            ],
            options={
                'verbose_name': 'Team Result',
                'verbose_name_plural': 'Team Results',
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(blank=True, max_length=300)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('registration_open', models.DateTimeField()),
                ('registration_ends', models.DateTimeField()),
                ('external_subsession_id', models.BigIntegerField(blank=True, help_text='Actual subsession/race ID from simulator API', null=True, unique=True)),
                ('external_session_id', models.BigIntegerField(blank=True, help_text='Session ID from simulator API (if different from subsession)', null=True)),
                ('is_predicted', models.BooleanField(default=True, help_text='True if generated from time pattern, False if from actual results')),
                ('is_matched', models.BooleanField(default=False, help_text='True if matched to actual simulator subsession')),
                ('predicted_start_time', models.DateTimeField(blank=True, help_text='Original predicted time (before matching to actual)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrackModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=280)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(blank=True, help_text="Track category: 'road' or 'oval'", max_length=20)),
                ('time_zone', models.CharField(blank=True, help_text="Track time zone (e.g., 'America/New_York')", max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='WeatherForecast',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('time_offset', models.IntegerField(help_text='Minutes from event start')),
                ('timestamp', models.DateTimeField(help_text='Absolute timestamp for this forecast point')),
                ('is_sun_up', models.BooleanField(help_text='True if sun is up at this time')),
                ('affects_session', models.BooleanField(help_text='True if a session is running at this time')),
                ('air_temperature', models.FloatField(help_text='Air temperature in Celsius (convert from simulator-specific units)')),
                ('pressure', models.FloatField(help_text='Atmospheric pressure in hectopascals/hPa (convert from simulator-specific units)')),
                ('wind_speed', models.FloatField(help_text='Wind speed in meters per second (convert from simulator-specific units)')),
                ('wind_direction', models.IntegerField(help_text='Wind direction in degrees 0-359')),
                ('precipitation_chance', models.IntegerField(help_text='Chance of precipitation as percentage 0-100')),
                ('precipitation_amount', models.FloatField(help_text='Precipitation rate in mm/hour (convert from simulator-specific units)')),
                ('allow_precipitation', models.BooleanField(help_text='Whether precipitation is allowed during this period')),
                ('cloud_cover', models.IntegerField(help_text='Cloud cover as percentage 0-100')),
                ('relative_humidity', models.IntegerField(help_text='Relative humidity as percentage 0-100')),
                ('forecast_version', models.IntegerField(help_text='Weather forecast API version from simulator')),
                ('valid_stats', models.BooleanField(help_text='Whether rain statistics are available for this period')),
                ('units_info', models.JSONField(blank=True, default=dict, help_text='Store unit conversion factors and original units for reference', null=True)),
                ('raw_data', models.JSONField(blank=True, help_text='Complete API response for future use and reference', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=280)),
                ('manufacturer', models.CharField(max_length=255)),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('abbreviated_name', models.CharField(blank=True, max_length=20)),
                ('category', models.CharField(choices=[('formula_car', 'Formula Car'), ('oval', 'Oval'), ('sports_car', 'Sports Car')], default='sports_car', help_text='Primary car category from iRacing API', max_length=20)),
                ('car_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text='Array of car types for searching (cleaned from API car_types)', size=None)),
                ('search_filters', models.CharField(blank=True, help_text='Search filters from iRacing API for advanced searching', max_length=500)),
                ('horsepower', models.IntegerField(blank=True, help_text='HP from iRacing API', null=True)),
                ('weight_lbs', models.IntegerField(blank=True, help_text='Car weight in pounds', null=True)),
                ('has_headlights', models.BooleanField(default=False, help_text='Whether car has headlights')),
                ('has_multiple_dry_tire_types', models.BooleanField(default=False, help_text='Multiple dry tire compounds available')),
                ('has_rain_capable_tire_types', models.BooleanField(default=False, help_text='Rain tires available')),
                ('rain_enabled', models.BooleanField(default=False, help_text='Can race in rain conditions')),
                ('ai_enabled', models.BooleanField(default=True, help_text='AI can drive this car')),
                ('release_year', models.IntegerField(blank=True, null=True)),
                ('default_image_url', models.URLField(blank=True)),
                ('base_specs', models.JSONField(blank=True, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['slug'], name='sim_carmode_slug_aa4fab_idx'), models.Index(fields=['manufacturer'], name='sim_carmode_manufac_73f933_idx'), models.Index(fields=['category'], name='sim_carmode_categor_dbabb8_idx'), models.Index(fields=['full_name'], name='sim_carmode_full_na_969acf_idx'), models.Index(fields=['horsepower'], name='sim_carmode_horsepo_7788b2_idx'), models.Index(fields=['weight_lbs'], name='sim_carmode_weight__506eb8_idx'), models.Index(fields=['rain_enabled'], name='sim_carmode_rain_en_c6705e_idx'), models.Index(fields=['has_headlights'], name='sim_carmode_has_hea_128e22_idx'), models.Index(fields=['car_types'], name='car_model_types_gin')],
                'unique_together': {('manufacturer', 'name', 'slug')},
            },
        ),
    ]
