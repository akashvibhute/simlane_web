# Generated by Django 5.1.11 on 2025-06-30 11:01

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('teams', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Plan name (e.g., 'Free', 'Basic', 'Pro')", max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly plan identifier', max_length=100, unique=True)),
                ('stripe_price_id', models.CharField(blank=True, help_text='Stripe Price ID for this plan', max_length=255, null=True, unique=True)),
                ('max_members', models.IntegerField(help_text='Maximum number of club members allowed (-1 for unlimited)')),
                ('monthly_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Monthly price in USD', max_digits=10)),
                ('features_json', models.JSONField(default=dict, help_text='JSON object defining available features for this plan')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this plan is available for new subscriptions')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default plan for new clubs')),
                ('description', models.TextField(blank=True, help_text='Plan description for display purposes')),
                ('display_order', models.IntegerField(default=0, help_text='Order for displaying plans (lower numbers first)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['display_order', 'monthly_price'],
                'indexes': [models.Index(fields=['is_active', 'display_order'], name='billing_sub_is_acti_e23f33_idx'), models.Index(fields=['stripe_price_id'], name='billing_sub_stripe__27d0a7_idx')],
            },
        ),
        migrations.CreateModel(
            name='ClubSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stripe_customer_id', models.CharField(blank=True, help_text='Stripe Customer ID', max_length=255, null=True, unique=True)),
                ('stripe_subscription_id', models.CharField(blank=True, help_text='Stripe Subscription ID', max_length=255, null=True, unique=True)),
                ('status', models.CharField(choices=[('incomplete', 'Incomplete'), ('incomplete_expired', 'Incomplete Expired'), ('trialing', 'Trialing'), ('active', 'Active'), ('past_due', 'Past Due'), ('canceled', 'Canceled'), ('unpaid', 'Unpaid'), ('paused', 'Paused')], default='active', max_length=20)),
                ('current_period_start', models.DateTimeField(blank=True, help_text='Start of current billing period', null=True)),
                ('current_period_end', models.DateTimeField(blank=True, help_text='End of current billing period', null=True)),
                ('seats_used', models.IntegerField(default=0, help_text='Current number of club members')),
                ('trial_start', models.DateTimeField(blank=True, help_text='Trial period start date', null=True)),
                ('trial_end', models.DateTimeField(blank=True, help_text='Trial period end date', null=True)),
                ('cancel_at_period_end', models.BooleanField(default=False, help_text='Whether subscription will cancel at period end')),
                ('canceled_at', models.DateTimeField(blank=True, help_text='When subscription was canceled', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional subscription metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to='teams.club')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subscriptions', to='billing.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='BillingEventLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stripe_event_id', models.CharField(blank=True, help_text='Stripe Event ID (null for internal events)', max_length=255, null=True, unique=True)),
                ('event_type', models.CharField(choices=[('customer.subscription.created', 'Subscription Created'), ('customer.subscription.updated', 'Subscription Updated'), ('customer.subscription.deleted', 'Subscription Deleted'), ('customer.subscription.trial_will_end', 'Trial Will End'), ('invoice.created', 'Invoice Created'), ('invoice.payment_succeeded', 'Invoice Paid'), ('invoice.payment_failed', 'Invoice Payment Failed'), ('invoice.finalized', 'Invoice Finalized'), ('customer.created', 'Customer Created'), ('customer.updated', 'Customer Updated'), ('customer.deleted', 'Customer Deleted'), ('payment_method.attached', 'Payment Method Attached'), ('payment_method.detached', 'Payment Method Detached'), ('checkout.session.completed', 'Checkout Completed'), ('checkout.session.expired', 'Checkout Expired'), ('subscription.limit_exceeded', 'Subscription Limit Exceeded'), ('subscription.plan_changed', 'Plan Changed'), ('billing.manual_adjustment', 'Manual Adjustment')], help_text='Type of billing event', max_length=50)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed'), ('ignored', 'Ignored')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When the event was successfully processed', null=True)),
                ('data_json', models.JSONField(help_text='Full event data from Stripe or internal event data')),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('retry_count', models.IntegerField(default=0, help_text='Number of processing retry attempts')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club_subscription', models.ForeignKey(blank=True, help_text='Associated club subscription (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='billing_events', to='billing.clubsubscription')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['stripe_event_id'], name='billing_bil_stripe__536771_idx'), models.Index(fields=['event_type', 'processing_status'], name='billing_bil_event_t_26b160_idx'), models.Index(fields=['club_subscription', 'event_type'], name='billing_bil_club_su_e8515b_idx'), models.Index(fields=['processing_status', 'created_at'], name='billing_bil_process_2ef2bd_idx'), models.Index(fields=['processed_at'], name='billing_bil_process_862e59_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='clubsubscription',
            index=models.Index(fields=['club'], name='billing_clu_club_id_f5b1f4_idx'),
        ),
        migrations.AddIndex(
            model_name='clubsubscription',
            index=models.Index(fields=['status'], name='billing_clu_status_3cb4bd_idx'),
        ),
        migrations.AddIndex(
            model_name='clubsubscription',
            index=models.Index(fields=['stripe_customer_id'], name='billing_clu_stripe__d3e301_idx'),
        ),
        migrations.AddIndex(
            model_name='clubsubscription',
            index=models.Index(fields=['stripe_subscription_id'], name='billing_clu_stripe__52af88_idx'),
        ),
        migrations.AddIndex(
            model_name='clubsubscription',
            index=models.Index(fields=['current_period_end'], name='billing_clu_current_2c7edd_idx'),
        ),
    ]
